{"id":"../node_modules/@aws-sdk/middleware-host-header/build/index.js","dependencies":[{"name":"/Users/a/Desktop/buildopsTest/package.json","includedInParent":true,"mtime":1588279417247},{"name":"/Users/a/Desktop/buildopsTest/node_modules/@aws-sdk/middleware-host-header/package.json","includedInParent":true,"mtime":1588279428052},{"name":"tslib","loc":{"line":3,"column":22},"parent":"/Users/a/Desktop/buildopsTest/node_modules/@aws-sdk/middleware-host-header/build/index.js","resolved":"/Users/a/Desktop/buildopsTest/node_modules/tslib/tslib.es6.js"},{"name":"@aws-sdk/protocol-http","loc":{"line":4,"column":30},"parent":"/Users/a/Desktop/buildopsTest/node_modules/@aws-sdk/middleware-host-header/build/index.js","resolved":"/Users/a/Desktop/buildopsTest/node_modules/@aws-sdk/protocol-http/build/index.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar protocol_http_1 = require(\"@aws-sdk/protocol-http\");\nfunction resolveHostHeaderConfig(input) {\n    return input;\n}\nexports.resolveHostHeaderConfig = resolveHostHeaderConfig;\nexports.hostHeaderMiddleware = function (options) { return function (next) { return function (args) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {\n    var request, _a, handlerProtocol;\n    return tslib_1.__generator(this, function (_b) {\n        if (!protocol_http_1.HttpRequest.isInstance(args.request))\n            return [2 /*return*/, next(args)];\n        request = args.request;\n        _a = (options.requestHandler.metadata || {}).handlerProtocol, handlerProtocol = _a === void 0 ? \"\" : _a;\n        //For H2 request, remove 'host' header and use ':authority' header instead\n        //reference: https://nodejs.org/dist/latest-v13.x/docs/api/errors.html#ERR_HTTP2_INVALID_CONNECTION_HEADERS\n        if (handlerProtocol.indexOf(\"h2\") >= 0 && !request.headers[\":authority\"]) {\n            delete request.headers[\"host\"];\n            request.headers[\":authority\"] = \"\";\n            //non-H2 request and 'host' header is not set, set the 'host' header to request's hostname.\n        }\n        else if (!request.headers[\"host\"]) {\n            request.headers[\"host\"] = request.hostname;\n        }\n        return [2 /*return*/, next(args)];\n    });\n}); }; }; };\nexports.hostHeaderMiddlewareOptions = {\n    name: \"hostHeaderMiddleware\",\n    step: \"build\",\n    tags: [\"HOST\"]\n};\nexports.getHostHeaderPlugin = function (options) { return ({\n    applyToStack: function (clientStack) {\n        clientStack.add(exports.hostHeaderMiddleware(options), exports.hostHeaderMiddlewareOptions);\n    }\n}); };\n"},"sourceMaps":{"js":{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;;AAAA,wDAAqD;AAgBrD,SAAgB,uBAAuB,CACrC,KAAqD;IAErD,OAAO,KAAK,CAAC;AACf,CAAC;AAJD,0DAIC;AAEY,QAAA,oBAAoB,GAAG,UAIlC,OAAiC,IACE,OAAA,UAAA,IAAI,IAAI,OAAA,UAAM,IAAI;;;QACrD,IAAI,CAAC,2BAAW,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC;YAAE,sBAAO,IAAI,CAAC,IAAI,CAAC,EAAC;QACrD,OAAO,GAAK,IAAI,QAAT,CAAU;QACjB,KAAyB,CAAA,OAAO,CAAC,cAAc,CAAC,QAAQ,IAAI,EAAE,CAAA,gBAA1C,EAApB,eAAe,mBAAG,EAAE,KAAA,CAA2C;QACvE,0EAA0E;QAC1E,2GAA2G;QAC3G,IAAI,eAAe,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,EAAE;YACxE,OAAO,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;YAC/B,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,GAAG,EAAE,CAAC;YACnC,2FAA2F;SAC5F;aAAM,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;YACnC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,OAAO,CAAC,QAAQ,CAAC;SAC5C;QACD,sBAAO,IAAI,CAAC,IAAI,CAAC,EAAC;;KACnB,EAd4C,CAc5C,EAdoC,CAcpC,CAAC;AAEW,QAAA,2BAA2B,GACnB;IACnB,IAAI,EAAE,sBAAsB;IAC5B,IAAI,EAAE,OAAO;IACb,IAAI,EAAE,CAAC,MAAM,CAAC;CACf,CAAC;AAEW,QAAA,mBAAmB,GAAG,UACjC,OAAiC,IACT,OAAA,CAAC;IACzB,YAAY,EAAE,UAAA,WAAW;QACvB,WAAW,CAAC,GAAG,CAAC,4BAAoB,CAAC,OAAO,CAAC,EAAE,mCAA2B,CAAC,CAAC;IAC9E,CAAC;CACF,CAAC,EAJwB,CAIxB,CAAC","sourcesContent":["import { HttpRequest } from \"@aws-sdk/protocol-http\";\nimport {\n  RequestHandler,\n  BuildMiddleware,\n  BuildHandlerOptions,\n  AbsoluteLocation,\n  Pluggable\n} from \"@aws-sdk/types\";\n\nexport interface HostHeaderInputConfig {}\ninterface PreviouslyResolved {\n  requestHandler: RequestHandler<any, any>;\n}\nexport interface HostHeaderResolvedConfig {\n  requestHandler: RequestHandler<any, any>;\n}\nexport function resolveHostHeaderConfig<T>(\n  input: T & PreviouslyResolved & HostHeaderInputConfig\n): T & HostHeaderResolvedConfig {\n  return input;\n}\n\nexport const hostHeaderMiddleware = <\n  Input extends object,\n  Output extends object\n>(\n  options: HostHeaderResolvedConfig\n): BuildMiddleware<Input, Output> => next => async args => {\n  if (!HttpRequest.isInstance(args.request)) return next(args);\n  const { request } = args;\n  const { handlerProtocol = \"\" } = options.requestHandler.metadata || {};\n  //For H2 request, remove 'host' header and use ':authority' header instead\n  //reference: https://nodejs.org/dist/latest-v13.x/docs/api/errors.html#ERR_HTTP2_INVALID_CONNECTION_HEADERS\n  if (handlerProtocol.indexOf(\"h2\") >= 0 && !request.headers[\":authority\"]) {\n    delete request.headers[\"host\"];\n    request.headers[\":authority\"] = \"\";\n    //non-H2 request and 'host' header is not set, set the 'host' header to request's hostname.\n  } else if (!request.headers[\"host\"]) {\n    request.headers[\"host\"] = request.hostname;\n  }\n  return next(args);\n};\n\nexport const hostHeaderMiddlewareOptions: BuildHandlerOptions &\n  AbsoluteLocation = {\n  name: \"hostHeaderMiddleware\",\n  step: \"build\",\n  tags: [\"HOST\"]\n};\n\nexport const getHostHeaderPlugin = (\n  options: HostHeaderResolvedConfig\n): Pluggable<any, any> => ({\n  applyToStack: clientStack => {\n    clientStack.add(hostHeaderMiddleware(options), hostHeaderMiddlewareOptions);\n  }\n});\n"]}},"error":null,"hash":"de3417d800ca7765970cb819d959b13b","cacheData":{"env":{}}}