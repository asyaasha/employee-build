{"id":"../node_modules/@aws-sdk/s3-request-presigner/build/index.js","dependencies":[{"name":"/Users/a/Desktop/buildopsTest/package.json","includedInParent":true,"mtime":1588355748633},{"name":"/Users/a/Desktop/buildopsTest/node_modules/@aws-sdk/s3-request-presigner/package.json","includedInParent":true,"mtime":1588306092046},{"name":"tslib","loc":{"line":3,"column":22},"parent":"/Users/a/Desktop/buildopsTest/node_modules/@aws-sdk/s3-request-presigner/build/index.js","resolved":"/Users/a/Desktop/buildopsTest/node_modules/tslib/tslib.es6.js"},{"name":"@aws-sdk/signature-v4","loc":{"line":4,"column":29},"parent":"/Users/a/Desktop/buildopsTest/node_modules/@aws-sdk/s3-request-presigner/build/index.js","resolved":"/Users/a/Desktop/buildopsTest/node_modules/@aws-sdk/signature-v4/dist/es/index.js"},{"name":"./constants","loc":{"line":5,"column":26},"parent":"/Users/a/Desktop/buildopsTest/node_modules/@aws-sdk/s3-request-presigner/build/index.js","resolved":"/Users/a/Desktop/buildopsTest/node_modules/@aws-sdk/s3-request-presigner/build/constants.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar signature_v4_1 = require(\"@aws-sdk/signature-v4\");\nvar constants_1 = require(\"./constants\");\nvar S3RequestPresigner = /** @class */ (function () {\n    function S3RequestPresigner(options) {\n        var resolvedOptions = tslib_1.__assign({ \n            // Allow `signingName` because we want to support usecase of supply client's resolved config\n            // directly. Where service equals signingName.\n            service: options.signingName || options.service || \"s3\", uriEscapePath: options.uriEscapePath || false }, options);\n        this.signer = new signature_v4_1.SignatureV4(resolvedOptions);\n    }\n    S3RequestPresigner.prototype.presign = function (requestToSign, _a) {\n        if (_a === void 0) { _a = {}; }\n        var _b = _a.unsignableHeaders, unsignableHeaders = _b === void 0 ? new Set() : _b, options = tslib_1.__rest(_a, [\"unsignableHeaders\"]);\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_c) {\n                unsignableHeaders.add(\"content-type\");\n                requestToSign.headers[constants_1.SHA256_HEADER] = constants_1.UNSIGNED_PAYLOAD;\n                return [2 /*return*/, this.signer.presign(requestToSign, tslib_1.__assign({ expiresIn: 900, unsignableHeaders: unsignableHeaders }, options))];\n            });\n        });\n    };\n    return S3RequestPresigner;\n}());\nexports.S3RequestPresigner = S3RequestPresigner;\n"},"sourceMaps":{"js":{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;;AACA,sDAI+B;AAE/B,yCAA8D;AAc9D;IAEE,4BAAY,OAAkC;QAC5C,IAAM,eAAe;YACnB,4FAA4F;YAC5F,8CAA8C;YAC9C,OAAO,EAAE,OAAO,CAAC,WAAW,IAAI,OAAO,CAAC,OAAO,IAAI,IAAI,EACvD,aAAa,EAAE,OAAO,CAAC,aAAa,IAAI,KAAK,IAC1C,OAAO,CACX,CAAC;QACF,IAAI,CAAC,MAAM,GAAG,IAAI,0BAAW,CAAC,eAAe,CAAC,CAAC;IACjD,CAAC;IAEY,oCAAO,GAApB,UACE,aAA2B,EAC3B,EAGkC;QAHlC,mBAAA,EAAA,OAGkC;QAFhC,IAAA,yBAA6B,EAA7B,kDAA6B,EAC7B,mDAAU;;;gBAGZ,iBAAiB,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;gBACtC,aAAa,CAAC,OAAO,CAAC,yBAAa,CAAC,GAAG,4BAAgB,CAAC;gBACxD,sBAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,aAAa,qBACtC,SAAS,EAAE,GAAG,EACd,iBAAiB,mBAAA,IACd,OAAO,EACV,EAAC;;;KACJ;IACH,yBAAC;AAAD,CAAC,AA5BD,IA4BC;AA5BY,gDAAkB","sourcesContent":["import { RequestPresigner, RequestPresigningArguments } from \"@aws-sdk/types\";\nimport {\n  SignatureV4,\n  SignatureV4Init,\n  SignatureV4CryptoInit\n} from \"@aws-sdk/signature-v4\";\nimport { HttpRequest as IHttpRequest } from \"@aws-sdk/types\";\nimport { UNSIGNED_PAYLOAD, SHA256_HEADER } from \"./constants\";\n\n/**\n * PartialBy<T, K> makes properties specified in K optional in interface T\n * see: https://stackoverflow.com/questions/43159887/make-a-single-property-optional-in-typescript\n * */\ntype Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\ntype PartialBy<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;\n\nexport type S3RequestPresignerOptions = PartialBy<\n  SignatureV4Init & SignatureV4CryptoInit,\n  \"service\" | \"uriEscapePath\"\n> & { signingName?: string };\n\nexport class S3RequestPresigner implements RequestPresigner {\n  private readonly signer: SignatureV4;\n  constructor(options: S3RequestPresignerOptions) {\n    const resolvedOptions = {\n      // Allow `signingName` because we want to support usecase of supply client's resolved config\n      // directly. Where service equals signingName.\n      service: options.signingName || options.service || \"s3\",\n      uriEscapePath: options.uriEscapePath || false,\n      ...options\n    };\n    this.signer = new SignatureV4(resolvedOptions);\n  }\n\n  public async presign(\n    requestToSign: IHttpRequest,\n    {\n      unsignableHeaders = new Set(),\n      ...options\n    }: RequestPresigningArguments = {}\n  ): Promise<IHttpRequest> {\n    unsignableHeaders.add(\"content-type\");\n    requestToSign.headers[SHA256_HEADER] = UNSIGNED_PAYLOAD;\n    return this.signer.presign(requestToSign, {\n      expiresIn: 900,\n      unsignableHeaders,\n      ...options\n    });\n  }\n}\n"]}},"error":null,"hash":"b4e949fd29c87ed42f0378fba34372c2","cacheData":{"env":{}}}