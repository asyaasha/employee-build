{"id":"../node_modules/@aws-sdk/middleware-expect-continue/build/index.js","dependencies":[{"name":"/Users/a/Desktop/buildopsTest/package.json","includedInParent":true,"mtime":1588305991096},{"name":"/Users/a/Desktop/buildopsTest/node_modules/@aws-sdk/middleware-expect-continue/package.json","includedInParent":true,"mtime":1588306092105},{"name":"tslib","loc":{"line":3,"column":22},"parent":"/Users/a/Desktop/buildopsTest/node_modules/@aws-sdk/middleware-expect-continue/build/index.js","resolved":"/Users/a/Desktop/buildopsTest/node_modules/tslib/tslib.es6.js"},{"name":"@aws-sdk/protocol-http","loc":{"line":4,"column":30},"parent":"/Users/a/Desktop/buildopsTest/node_modules/@aws-sdk/middleware-expect-continue/build/index.js","resolved":"/Users/a/Desktop/buildopsTest/node_modules/@aws-sdk/protocol-http/build/index.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar protocol_http_1 = require(\"@aws-sdk/protocol-http\");\nfunction addExpectContinueMiddleware(options) {\n    var _this = this;\n    return function (next) { return function (args) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n        var request;\n        return tslib_1.__generator(this, function (_a) {\n            request = args.request;\n            if (protocol_http_1.HttpRequest.isInstance(request) &&\n                request.body &&\n                options.runtime === \"node\") {\n                request.headers = tslib_1.__assign(tslib_1.__assign({}, request.headers), { Expect: \"100-continue\" });\n            }\n            return [2 /*return*/, next(tslib_1.__assign(tslib_1.__assign({}, args), { request: request }))];\n        });\n    }); }; };\n}\nexports.addExpectContinueMiddleware = addExpectContinueMiddleware;\nexports.addExpectContinueMiddlewareOptions = {\n    step: \"build\",\n    tags: [\"SET_EXPECT_HEADER\", \"EXPECT_HEADER\"],\n    name: \"addExpectContinueMiddleware\"\n};\nexports.getAddExpectContinuePlugin = function (options) { return ({\n    applyToStack: function (clientStack) {\n        clientStack.add(addExpectContinueMiddleware(options), exports.addExpectContinueMiddlewareOptions);\n    }\n}); };\n"},"sourceMaps":{"js":{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;;AASA,wDAAqD;AAMrD,SAAgB,2BAA2B,CACzC,OAA2B;IAD7B,iBAwBC;IArBC,OAAO,UACL,IAA+B,IACD,OAAA,UAC9B,IAAgC;;;YAE1B,OAAO,GAAK,IAAI,QAAT,CAAU;YACvB,IACE,2BAAW,CAAC,UAAU,CAAC,OAAO,CAAC;gBAC/B,OAAO,CAAC,IAAI;gBACZ,OAAO,CAAC,OAAO,KAAK,MAAM,EAC1B;gBACA,OAAO,CAAC,OAAO,yCACV,OAAO,CAAC,OAAO,KAClB,MAAM,EAAE,cAAc,GACvB,CAAC;aACH;YACD,sBAAO,IAAI,uCACN,IAAI,KACP,OAAO,SAAA,IACP,EAAC;;SACJ,EAlB+B,CAkB/B,CAAC;AACJ,CAAC;AAxBD,kEAwBC;AAEY,QAAA,kCAAkC,GAAwB;IACrE,IAAI,EAAE,OAAO;IACb,IAAI,EAAE,CAAC,mBAAmB,EAAE,eAAe,CAAC;IAC5C,IAAI,EAAE,6BAA6B;CACpC,CAAC;AAEW,QAAA,0BAA0B,GAAG,UACxC,OAA2B,IACH,OAAA,CAAC;IACzB,YAAY,EAAE,UAAA,WAAW;QACvB,WAAW,CAAC,GAAG,CACb,2BAA2B,CAAC,OAAO,CAAC,EACpC,0CAAkC,CACnC,CAAC;IACJ,CAAC;CACF,CAAC,EAPwB,CAOxB,CAAC","sourcesContent":["import {\n  BuildHandler,\n  BuildHandlerArguments,\n  BuildHandlerOptions,\n  BuildHandlerOutput,\n  BuildMiddleware,\n  MetadataBearer,\n  Pluggable\n} from \"@aws-sdk/types\";\nimport { HttpRequest } from \"@aws-sdk/protocol-http\";\n\ninterface PreviouslyResolved {\n  runtime: string;\n}\n\nexport function addExpectContinueMiddleware(\n  options: PreviouslyResolved\n): BuildMiddleware<any, any> {\n  return <Output extends MetadataBearer>(\n    next: BuildHandler<any, Output>\n  ): BuildHandler<any, Output> => async (\n    args: BuildHandlerArguments<any>\n  ): Promise<BuildHandlerOutput<Output>> => {\n    let { request } = args;\n    if (\n      HttpRequest.isInstance(request) &&\n      request.body &&\n      options.runtime === \"node\"\n    ) {\n      request.headers = {\n        ...request.headers,\n        Expect: \"100-continue\"\n      };\n    }\n    return next({\n      ...args,\n      request\n    });\n  };\n}\n\nexport const addExpectContinueMiddlewareOptions: BuildHandlerOptions = {\n  step: \"build\",\n  tags: [\"SET_EXPECT_HEADER\", \"EXPECT_HEADER\"],\n  name: \"addExpectContinueMiddleware\"\n};\n\nexport const getAddExpectContinuePlugin = (\n  options: PreviouslyResolved\n): Pluggable<any, any> => ({\n  applyToStack: clientStack => {\n    clientStack.add(\n      addExpectContinueMiddleware(options),\n      addExpectContinueMiddlewareOptions\n    );\n  }\n});\n"]}},"error":null,"hash":"ac812802c79fe2c49a775dbea0198d25","cacheData":{"env":{}}}