{"id":"../node_modules/@aws-sdk/eventstream-marshaller/build/EventStreamMarshaller.js","dependencies":[{"name":"/Users/a/Desktop/buildopsTest/package.json","includedInParent":true,"mtime":1588209350205},{"name":"/Users/a/Desktop/buildopsTest/node_modules/@aws-sdk/eventstream-marshaller/package.json","includedInParent":true,"mtime":1588208103051},{"name":"./HeaderMarshaller","loc":{"line":3,"column":33},"parent":"/Users/a/Desktop/buildopsTest/node_modules/@aws-sdk/eventstream-marshaller/build/EventStreamMarshaller.js","resolved":"/Users/a/Desktop/buildopsTest/node_modules/@aws-sdk/eventstream-marshaller/build/HeaderMarshaller.js"},{"name":"./splitMessage","loc":{"line":4,"column":29},"parent":"/Users/a/Desktop/buildopsTest/node_modules/@aws-sdk/eventstream-marshaller/build/EventStreamMarshaller.js","resolved":"/Users/a/Desktop/buildopsTest/node_modules/@aws-sdk/eventstream-marshaller/build/splitMessage.js"},{"name":"@aws-crypto/crc32","loc":{"line":5,"column":22},"parent":"/Users/a/Desktop/buildopsTest/node_modules/@aws-sdk/eventstream-marshaller/build/EventStreamMarshaller.js","resolved":"/Users/a/Desktop/buildopsTest/node_modules/@aws-crypto/crc32/build/index.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar HeaderMarshaller_1 = require(\"./HeaderMarshaller\");\nvar splitMessage_1 = require(\"./splitMessage\");\nvar crc32_1 = require(\"@aws-crypto/crc32\");\n/**\n * A marshaller that can convert binary-packed event stream messages into\n * JavaScript objects and back again into their binary format.\n */\nvar EventStreamMarshaller = /** @class */ (function () {\n    function EventStreamMarshaller(toUtf8, fromUtf8) {\n        this.headerMarshaller = new HeaderMarshaller_1.HeaderMarshaller(toUtf8, fromUtf8);\n    }\n    /**\n     * Convert a structured JavaScript object with tagged headers into a binary\n     * event stream message.\n     */\n    EventStreamMarshaller.prototype.marshall = function (_a) {\n        var rawHeaders = _a.headers, body = _a.body;\n        var headers = this.headerMarshaller.format(rawHeaders);\n        var length = headers.byteLength + body.byteLength + 16;\n        var out = new Uint8Array(length);\n        var view = new DataView(out.buffer, out.byteOffset, out.byteLength);\n        var checksum = new crc32_1.Crc32();\n        // Format message\n        view.setUint32(0, length, false);\n        view.setUint32(4, headers.byteLength, false);\n        view.setUint32(8, checksum.update(out.subarray(0, 8)).digest(), false);\n        out.set(headers, 12);\n        out.set(body, headers.byteLength + 12);\n        // Write trailing message checksum\n        view.setUint32(length - 4, checksum.update(out.subarray(8, length - 4)).digest(), false);\n        return out;\n    };\n    /**\n     * Convert a binary event stream message into a JavaScript object with an\n     * opaque, binary body and tagged, parsed headers.\n     */\n    EventStreamMarshaller.prototype.unmarshall = function (message) {\n        var _a = splitMessage_1.splitMessage(message), headers = _a.headers, body = _a.body;\n        return { headers: this.headerMarshaller.parse(headers), body: body };\n    };\n    /**\n     * Convert a structured JavaScript object with tagged headers into a binary\n     * event stream message header.\n     */\n    EventStreamMarshaller.prototype.formatHeaders = function (rawHeaders) {\n        return this.headerMarshaller.format(rawHeaders);\n    };\n    return EventStreamMarshaller;\n}());\nexports.EventStreamMarshaller = EventStreamMarshaller;\n"},"sourceMaps":{"js":{"version":3,"file":"EventStreamMarshaller.js","sourceRoot":"","sources":["../src/EventStreamMarshaller.ts"],"names":[],"mappings":";;AAAA,uDAAsD;AACtD,+CAA8C;AAE9C,2CAA0C;AAG1C;;;GAGG;AACH;IAGE,+BAAY,MAAe,EAAE,QAAiB;QAC5C,IAAI,CAAC,gBAAgB,GAAG,IAAI,mCAAgB,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;IACjE,CAAC;IAED;;;OAGG;IACH,wCAAQ,GAAR,UAAS,EAAsC;YAApC,uBAAmB,EAAE,cAAI;QAClC,IAAM,OAAO,GAAG,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;QACzD,IAAM,MAAM,GAAG,OAAO,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;QAEzD,IAAM,GAAG,GAAG,IAAI,UAAU,CAAC,MAAM,CAAC,CAAC;QACnC,IAAM,IAAI,GAAG,IAAI,QAAQ,CAAC,GAAG,CAAC,MAAM,EAAE,GAAG,CAAC,UAAU,EAAE,GAAG,CAAC,UAAU,CAAC,CAAC;QACtE,IAAM,QAAQ,GAAG,IAAI,aAAK,EAAE,CAAC;QAE7B,iBAAiB;QACjB,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;QACjC,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,OAAO,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;QAC7C,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,EAAE,KAAK,CAAC,CAAC;QACvE,GAAG,CAAC,GAAG,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;QACrB,GAAG,CAAC,GAAG,CAAC,IAAI,EAAE,OAAO,CAAC,UAAU,GAAG,EAAE,CAAC,CAAC;QAEvC,kCAAkC;QAClC,IAAI,CAAC,SAAS,CACZ,MAAM,GAAG,CAAC,EACV,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,EAAE,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,EACrD,KAAK,CACN,CAAC;QAEF,OAAO,GAAG,CAAC;IACb,CAAC;IAED;;;OAGG;IACH,0CAAU,GAAV,UAAW,OAAwB;QAC3B,IAAA,yCAAyC,EAAvC,oBAAO,EAAE,cAA8B,CAAC;QAEhD,OAAO,EAAE,OAAO,EAAE,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,OAAO,CAAC,EAAE,IAAI,MAAA,EAAE,CAAC;IACjE,CAAC;IAED;;;OAGG;IACH,6CAAa,GAAb,UAAc,UAA0B;QACtC,OAAO,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;IAClD,CAAC;IACH,4BAAC;AAAD,CAAC,AArDD,IAqDC;AArDY,sDAAqB","sourcesContent":["import { HeaderMarshaller } from \"./HeaderMarshaller\";\nimport { splitMessage } from \"./splitMessage\";\nimport { Message, MessageHeaders } from \"@aws-sdk/types\";\nimport { Crc32 } from \"@aws-crypto/crc32\";\nimport { Decoder, Encoder } from \"@aws-sdk/types\";\n\n/**\n * A marshaller that can convert binary-packed event stream messages into\n * JavaScript objects and back again into their binary format.\n */\nexport class EventStreamMarshaller {\n  private readonly headerMarshaller: HeaderMarshaller;\n\n  constructor(toUtf8: Encoder, fromUtf8: Decoder) {\n    this.headerMarshaller = new HeaderMarshaller(toUtf8, fromUtf8);\n  }\n\n  /**\n   * Convert a structured JavaScript object with tagged headers into a binary\n   * event stream message.\n   */\n  marshall({ headers: rawHeaders, body }: Message): Uint8Array {\n    const headers = this.headerMarshaller.format(rawHeaders);\n    const length = headers.byteLength + body.byteLength + 16;\n\n    const out = new Uint8Array(length);\n    const view = new DataView(out.buffer, out.byteOffset, out.byteLength);\n    const checksum = new Crc32();\n\n    // Format message\n    view.setUint32(0, length, false);\n    view.setUint32(4, headers.byteLength, false);\n    view.setUint32(8, checksum.update(out.subarray(0, 8)).digest(), false);\n    out.set(headers, 12);\n    out.set(body, headers.byteLength + 12);\n\n    // Write trailing message checksum\n    view.setUint32(\n      length - 4,\n      checksum.update(out.subarray(8, length - 4)).digest(),\n      false\n    );\n\n    return out;\n  }\n\n  /**\n   * Convert a binary event stream message into a JavaScript object with an\n   * opaque, binary body and tagged, parsed headers.\n   */\n  unmarshall(message: ArrayBufferView): Message {\n    const { headers, body } = splitMessage(message);\n\n    return { headers: this.headerMarshaller.parse(headers), body };\n  }\n\n  /**\n   * Convert a structured JavaScript object with tagged headers into a binary\n   * event stream message header.\n   */\n  formatHeaders(rawHeaders: MessageHeaders): Uint8Array {\n    return this.headerMarshaller.format(rawHeaders);\n  }\n}\n"]}},"error":null,"hash":"b962a87ae7aabd379a3fd5187f421614","cacheData":{"env":{}}}