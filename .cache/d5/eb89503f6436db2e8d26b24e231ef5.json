{"id":"../node_modules/@aws-sdk/chunked-blob-reader/build/index.js","dependencies":[{"name":"/Users/a/Desktop/buildopsTest/package.json","includedInParent":true,"mtime":1588218602939},{"name":"/Users/a/Desktop/buildopsTest/node_modules/@aws-sdk/chunked-blob-reader/package.json","includedInParent":true,"mtime":1588216998894}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction blobReader(blob, onChunk, chunkSize) {\n    if (chunkSize === void 0) { chunkSize = 1024 * 1024; }\n    return new Promise(function (resolve, reject) {\n        var fileReader = new FileReader();\n        fileReader.addEventListener(\"error\", reject);\n        fileReader.addEventListener(\"abort\", reject);\n        var size = blob.size;\n        var totalBytesRead = 0;\n        function read() {\n            if (totalBytesRead >= size) {\n                resolve();\n                return;\n            }\n            fileReader.readAsArrayBuffer(blob.slice(totalBytesRead, Math.min(size, totalBytesRead + chunkSize)));\n        }\n        fileReader.addEventListener(\"load\", function (event) {\n            var result = event.target.result;\n            onChunk(new Uint8Array(result));\n            totalBytesRead += result.byteLength;\n            // read the next block\n            read();\n        });\n        // kick off the read\n        read();\n    });\n}\nexports.blobReader = blobReader;\n"},"sourceMaps":{"js":{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;AAAA,SAAgB,UAAU,CACxB,IAAU,EACV,OAAoC,EACpC,SAA+B;IAA/B,0BAAA,EAAA,YAAoB,IAAI,GAAG,IAAI;IAE/B,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;QACjC,IAAM,UAAU,GAAG,IAAI,UAAU,EAAE,CAAC;QAEpC,UAAU,CAAC,gBAAgB,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;QAC7C,UAAU,CAAC,gBAAgB,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;QAE7C,IAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QACvB,IAAI,cAAc,GAAG,CAAC,CAAC;QAEvB,SAAS,IAAI;YACX,IAAI,cAAc,IAAI,IAAI,EAAE;gBAC1B,OAAO,EAAE,CAAC;gBACV,OAAO;aACR;YACD,UAAU,CAAC,iBAAiB,CAC1B,IAAI,CAAC,KAAK,CAAC,cAAc,EAAE,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,cAAc,GAAG,SAAS,CAAC,CAAC,CACvE,CAAC;QACJ,CAAC;QAED,UAAU,CAAC,gBAAgB,CAAC,MAAM,EAAE,UAAA,KAAK;YACvC,IAAM,MAAM,GAAiB,KAAK,CAAC,MAAc,CAAC,MAAM,CAAC;YACzD,OAAO,CAAC,IAAI,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC;YAChC,cAAc,IAAI,MAAM,CAAC,UAAU,CAAC;YACpC,sBAAsB;YACtB,IAAI,EAAE,CAAC;QACT,CAAC,CAAC,CAAC;QAEH,oBAAoB;QACpB,IAAI,EAAE,CAAC;IACT,CAAC,CAAC,CAAC;AACL,CAAC;AAnCD,gCAmCC","sourcesContent":["export function blobReader(\n  blob: Blob,\n  onChunk: (chunk: Uint8Array) => void,\n  chunkSize: number = 1024 * 1024\n): Promise<void> {\n  return new Promise((resolve, reject) => {\n    const fileReader = new FileReader();\n\n    fileReader.addEventListener(\"error\", reject);\n    fileReader.addEventListener(\"abort\", reject);\n\n    const size = blob.size;\n    let totalBytesRead = 0;\n\n    function read() {\n      if (totalBytesRead >= size) {\n        resolve();\n        return;\n      }\n      fileReader.readAsArrayBuffer(\n        blob.slice(totalBytesRead, Math.min(size, totalBytesRead + chunkSize))\n      );\n    }\n\n    fileReader.addEventListener(\"load\", event => {\n      const result = <ArrayBuffer>(event.target as any).result;\n      onChunk(new Uint8Array(result));\n      totalBytesRead += result.byteLength;\n      // read the next block\n      read();\n    });\n\n    // kick off the read\n    read();\n  });\n}\n"]}},"error":null,"hash":"e76041f12ed35ca575594de7ce7c2557","cacheData":{"env":{}}}