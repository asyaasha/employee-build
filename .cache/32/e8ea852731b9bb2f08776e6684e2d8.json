{"id":"../node_modules/@aws-sdk/middleware-apply-body-checksum/build/applyMd5BodyChecksumMiddleware.js","dependencies":[{"name":"/Users/a/Desktop/buildopsTest/package.json","includedInParent":true,"mtime":1588279417247},{"name":"/Users/a/Desktop/buildopsTest/node_modules/@aws-sdk/middleware-apply-body-checksum/package.json","includedInParent":true,"mtime":1588279428053},{"name":"tslib","loc":{"line":3,"column":22},"parent":"/Users/a/Desktop/buildopsTest/node_modules/@aws-sdk/middleware-apply-body-checksum/build/applyMd5BodyChecksumMiddleware.js","resolved":"/Users/a/Desktop/buildopsTest/node_modules/tslib/tslib.es6.js"},{"name":"@aws-sdk/is-array-buffer","loc":{"line":4,"column":32},"parent":"/Users/a/Desktop/buildopsTest/node_modules/@aws-sdk/middleware-apply-body-checksum/build/applyMd5BodyChecksumMiddleware.js","resolved":"/Users/a/Desktop/buildopsTest/node_modules/@aws-sdk/is-array-buffer/build/index.js"},{"name":"@aws-sdk/protocol-http","loc":{"line":5,"column":30},"parent":"/Users/a/Desktop/buildopsTest/node_modules/@aws-sdk/middleware-apply-body-checksum/build/applyMd5BodyChecksumMiddleware.js","resolved":"/Users/a/Desktop/buildopsTest/node_modules/@aws-sdk/protocol-http/build/index.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar is_array_buffer_1 = require(\"@aws-sdk/is-array-buffer\");\nvar protocol_http_1 = require(\"@aws-sdk/protocol-http\");\nfunction applyMd5BodyChecksumMiddleware(options) {\n    var _this = this;\n    return function (next) { return function (args) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n        var request, body, headers, digest, hash, _a, _b, _c, _d, _e, _f, _g;\n        return tslib_1.__generator(this, function (_h) {\n            switch (_h.label) {\n                case 0:\n                    request = args.request;\n                    if (!protocol_http_1.HttpRequest.isInstance(request)) return [3 /*break*/, 2];\n                    body = request.body, headers = request.headers;\n                    if (!!hasHeader(\"Content-MD5\", headers)) return [3 /*break*/, 2];\n                    digest = void 0;\n                    if (body === undefined ||\n                        typeof body === \"string\" ||\n                        ArrayBuffer.isView(body) ||\n                        is_array_buffer_1.isArrayBuffer(body)) {\n                        hash = new options.md5();\n                        hash.update(body || \"\");\n                        digest = hash.digest();\n                    }\n                    else {\n                        digest = options.streamHasher(options.md5, body);\n                    }\n                    _a = [tslib_1.__assign({}, request)];\n                    _b = {};\n                    _c = [tslib_1.__assign({}, headers)];\n                    _d = {};\n                    _e = \"Content-MD5\";\n                    _g = (_f = options).base64Encoder;\n                    return [4 /*yield*/, digest];\n                case 1:\n                    request = tslib_1.__assign.apply(void 0, _a.concat([(_b.headers = tslib_1.__assign.apply(void 0, _c.concat([(_d[_e] = _g.apply(_f, [_h.sent()]), _d)])), _b)]));\n                    _h.label = 2;\n                case 2: return [2 /*return*/, next(tslib_1.__assign(tslib_1.__assign({}, args), { request: request }))];\n            }\n        });\n    }); }; };\n}\nexports.applyMd5BodyChecksumMiddleware = applyMd5BodyChecksumMiddleware;\nexports.applyMd5BodyChecksumMiddlewareOptions = {\n    name: \"applyMd5BodyChecksumMiddleware\",\n    step: \"build\",\n    tags: [\"SET_CONTENT_MD5\", \"BODY_CHECKSUM\"]\n};\nexports.getApplyMd5BodyChecksumPlugin = function (config) { return ({\n    applyToStack: function (clientStack) {\n        clientStack.add(applyMd5BodyChecksumMiddleware(config), exports.applyMd5BodyChecksumMiddlewareOptions);\n    }\n}); };\nfunction hasHeader(soughtHeader, headers) {\n    var e_1, _a;\n    soughtHeader = soughtHeader.toLowerCase();\n    try {\n        for (var _b = tslib_1.__values(Object.keys(headers)), _c = _b.next(); !_c.done; _c = _b.next()) {\n            var headerName = _c.value;\n            if (soughtHeader === headerName.toLowerCase()) {\n                return true;\n            }\n        }\n    }\n    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n    finally {\n        try {\n            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        }\n        finally { if (e_1) throw e_1.error; }\n    }\n    return false;\n}\n"},"sourceMaps":{"js":{"version":3,"file":"applyMd5BodyChecksumMiddleware.js","sourceRoot":"","sources":["../src/applyMd5BodyChecksumMiddleware.ts"],"names":[],"mappings":";;;AAAA,4DAAyD;AAWzD,wDAAqD;AAGrD,SAAgB,8BAA8B,CAC5C,OAAsC;IADxC,iBAwCC;IArCC,OAAO,UACL,IAA+B,IACD,OAAA,UAC9B,IAAgC;;;;;oBAE1B,OAAO,GAAK,IAAI,QAAT,CAAU;yBACnB,2BAAW,CAAC,UAAU,CAAC,OAAO,CAAC,EAA/B,wBAA+B;oBACzB,IAAI,GAAc,OAAO,KAArB,EAAE,OAAO,GAAK,OAAO,QAAZ,CAAa;yBAC9B,CAAC,SAAS,CAAC,aAAa,EAAE,OAAO,CAAC,EAAlC,wBAAkC;oBAChC,MAAM,SAAqB,CAAC;oBAChC,IACE,IAAI,KAAK,SAAS;wBAClB,OAAO,IAAI,KAAK,QAAQ;wBACxB,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC;wBACxB,+BAAa,CAAC,IAAI,CAAC,EACnB;wBACM,IAAI,GAAG,IAAI,OAAO,CAAC,GAAG,EAAE,CAAC;wBAC/B,IAAI,CAAC,MAAM,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC;wBACxB,MAAM,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;qBACxB;yBAAM;wBACL,MAAM,GAAG,OAAO,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;qBAClD;+CAGI,OAAO;;+CAEL,OAAO;;oBACV,KAAA,aAAa,CAAA;oBAAE,KAAA,CAAA,KAAA,OAAO,CAAA,CAAC,aAAa,CAAA;oBAAC,qBAAM,MAAM,EAAA;;oBAJrD,OAAO,8CAEL,UAAO,8CAEL,MAAa,GAAE,cAAsB,SAAY,EAAC,gBAErD,CAAC;;wBAGN,sBAAO,IAAI,uCACN,IAAI,KACP,OAAO,SAAA,IACP,EAAC;;;SACJ,EAlC+B,CAkC/B,CAAC;AACJ,CAAC;AAxCD,wEAwCC;AAEY,QAAA,qCAAqC,GAAwB;IACxE,IAAI,EAAE,gCAAgC;IACtC,IAAI,EAAE,OAAO;IACb,IAAI,EAAE,CAAC,iBAAiB,EAAE,eAAe,CAAC;CAC3C,CAAC;AAEW,QAAA,6BAA6B,GAAG,UAC3C,MAAqC,IACb,OAAA,CAAC;IACzB,YAAY,EAAE,UAAA,WAAW;QACvB,WAAW,CAAC,GAAG,CACb,8BAA8B,CAAC,MAAM,CAAC,EACtC,6CAAqC,CACtC,CAAC;IACJ,CAAC;CACF,CAAC,EAPwB,CAOxB,CAAC;AAEH,SAAS,SAAS,CAAC,YAAoB,EAAE,OAAkB;;IACzD,YAAY,GAAG,YAAY,CAAC,WAAW,EAAE,CAAC;;QAC1C,KAAyB,IAAA,KAAA,iBAAA,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA,gBAAA,4BAAE;YAA1C,IAAM,UAAU,WAAA;YACnB,IAAI,YAAY,KAAK,UAAU,CAAC,WAAW,EAAE,EAAE;gBAC7C,OAAO,IAAI,CAAC;aACb;SACF;;;;;;;;;IAED,OAAO,KAAK,CAAC;AACf,CAAC","sourcesContent":["import { isArrayBuffer } from \"@aws-sdk/is-array-buffer\";\nimport {\n  BuildHandler,\n  BuildHandlerArguments,\n  BuildHandlerOptions,\n  BuildHandlerOutput,\n  BuildMiddleware,\n  MetadataBearer,\n  HeaderBag,\n  Pluggable\n} from \"@aws-sdk/types\";\nimport { HttpRequest } from \"@aws-sdk/protocol-http\";\nimport { Md5BodyChecksumResolvedConfig } from \"./md5Configuration\";\n\nexport function applyMd5BodyChecksumMiddleware(\n  options: Md5BodyChecksumResolvedConfig\n): BuildMiddleware<any, any> {\n  return <Output extends MetadataBearer>(\n    next: BuildHandler<any, Output>\n  ): BuildHandler<any, Output> => async (\n    args: BuildHandlerArguments<any>\n  ): Promise<BuildHandlerOutput<Output>> => {\n    let { request } = args;\n    if (HttpRequest.isInstance(request)) {\n      const { body, headers } = request;\n      if (!hasHeader(\"Content-MD5\", headers)) {\n        let digest: Promise<Uint8Array>;\n        if (\n          body === undefined ||\n          typeof body === \"string\" ||\n          ArrayBuffer.isView(body) ||\n          isArrayBuffer(body)\n        ) {\n          const hash = new options.md5();\n          hash.update(body || \"\");\n          digest = hash.digest();\n        } else {\n          digest = options.streamHasher(options.md5, body);\n        }\n\n        request = {\n          ...request,\n          headers: {\n            ...headers,\n            \"Content-MD5\": options.base64Encoder(await digest)\n          }\n        };\n      }\n    }\n    return next({\n      ...args,\n      request\n    });\n  };\n}\n\nexport const applyMd5BodyChecksumMiddlewareOptions: BuildHandlerOptions = {\n  name: \"applyMd5BodyChecksumMiddleware\",\n  step: \"build\",\n  tags: [\"SET_CONTENT_MD5\", \"BODY_CHECKSUM\"]\n};\n\nexport const getApplyMd5BodyChecksumPlugin = (\n  config: Md5BodyChecksumResolvedConfig\n): Pluggable<any, any> => ({\n  applyToStack: clientStack => {\n    clientStack.add(\n      applyMd5BodyChecksumMiddleware(config),\n      applyMd5BodyChecksumMiddlewareOptions\n    );\n  }\n});\n\nfunction hasHeader(soughtHeader: string, headers: HeaderBag): boolean {\n  soughtHeader = soughtHeader.toLowerCase();\n  for (const headerName of Object.keys(headers)) {\n    if (soughtHeader === headerName.toLowerCase()) {\n      return true;\n    }\n  }\n\n  return false;\n}\n"]}},"error":null,"hash":"5d4b68537be37c5f6a71b5be552903fe","cacheData":{"env":{}}}