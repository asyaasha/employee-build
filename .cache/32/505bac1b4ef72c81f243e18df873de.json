{"id":"../node_modules/@aws-sdk/config-resolver/build/RegionConfig.js","dependencies":[{"name":"/Users/a/Desktop/buildopsTest/package.json","includedInParent":true,"mtime":1588218602939},{"name":"/Users/a/Desktop/buildopsTest/node_modules/@aws-sdk/config-resolver/package.json","includedInParent":true,"mtime":1588216998796},{"name":"tslib","loc":{"line":3,"column":22},"parent":"/Users/a/Desktop/buildopsTest/node_modules/@aws-sdk/config-resolver/build/RegionConfig.js","resolved":"/Users/a/Desktop/buildopsTest/node_modules/tslib/tslib.es6.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nfunction resolveRegionConfig(input) {\n    var region = input.region || input.regionDefaultProvider(input);\n    return tslib_1.__assign(tslib_1.__assign({}, input), { region: normalizeRegion(region) });\n}\nexports.resolveRegionConfig = resolveRegionConfig;\nfunction normalizeRegion(region) {\n    if (typeof region === \"string\") {\n        var promisified_1 = Promise.resolve(region);\n        return function () { return promisified_1; };\n    }\n    return region;\n}\n"},"sourceMaps":{"js":{"version":3,"file":"RegionConfig.js","sourceRoot":"","sources":["../src/RegionConfig.ts"],"names":[],"mappings":";;;AAcA,SAAgB,mBAAmB,CACjC,KAAiD;IAEjD,IAAI,MAAM,GAAG,KAAK,CAAC,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,KAAY,CAAC,CAAC;IACvE,6CACK,KAAK,KACR,MAAM,EAAE,eAAe,CAAC,MAAM,CAAC,IAC/B;AACJ,CAAC;AARD,kDAQC;AAED,SAAS,eAAe,CAAC,MAAiC;IACxD,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;QAC9B,IAAM,aAAW,GAAG,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAC5C,OAAO,cAAM,OAAA,aAAW,EAAX,CAAW,CAAC;KAC1B;IACD,OAAO,MAA0B,CAAC;AACpC,CAAC","sourcesContent":["import { Provider } from \"@aws-sdk/types\";\n\nexport interface RegionInputConfig {\n  /**\n   * The AWS region to which this client will send requests\n   */\n  region?: string | Provider<string>;\n}\ninterface PreviouslyResolved {\n  regionDefaultProvider: (input: any) => Provider<string>;\n}\nexport interface RegionResolvedConfig {\n  region: Provider<string>;\n}\nexport function resolveRegionConfig<T>(\n  input: T & RegionInputConfig & PreviouslyResolved\n): T & RegionResolvedConfig {\n  let region = input.region || input.regionDefaultProvider(input as any);\n  return {\n    ...input,\n    region: normalizeRegion(region)\n  };\n}\n\nfunction normalizeRegion(region: string | Provider<string>): Provider<string> {\n  if (typeof region === \"string\") {\n    const promisified = Promise.resolve(region);\n    return () => promisified;\n  }\n  return region as Provider<string>;\n}\n"]}},"error":null,"hash":"76a4498a936de68787d4ba3bbdac2fa0","cacheData":{"env":{}}}