{"id":"../node_modules/@aws-sdk/middleware-retry/build/constants.js","dependencies":[{"name":"/Users/a/Desktop/buildopsTest/package.json","includedInParent":true,"mtime":1588209350205},{"name":"/Users/a/Desktop/buildopsTest/node_modules/@aws-sdk/middleware-retry/package.json","includedInParent":true,"mtime":1588208103132}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * The base number of milliseconds to use in calculating a suitable cool-down\n * time when a retryable error is encountered.\n */\nexports.DEFAULT_RETRY_DELAY_BASE = 100;\n/**\n * The maximum amount of time (in milliseconds) that will be used as a delay\n * between retry attempts.\n */\nexports.MAXIMUM_RETRY_DELAY = 20 * 1000;\n/**\n * HTTP status codes that indicate the operation may be retried.\n */\nexports.RETRYABLE_STATUS_CODES = new Set();\n[429, 500, 502, 503, 504, 509].forEach(function (code) {\n    return exports.RETRYABLE_STATUS_CODES.add(code);\n});\n/**\n * The retry delay base (in milliseconds) to use when a throttling error is\n * encountered.\n */\nexports.THROTTLING_RETRY_DELAY_BASE = 500;\n"},"sourceMaps":{"js":{"version":3,"file":"constants.js","sourceRoot":"","sources":["../src/constants.ts"],"names":[],"mappings":";;AAAA;;;GAGG;AACU,QAAA,wBAAwB,GAAG,GAAG,CAAC;AAE5C;;;GAGG;AACU,QAAA,mBAAmB,GAAG,EAAE,GAAG,IAAI,CAAC;AAE7C;;GAEG;AACU,QAAA,sBAAsB,GAAG,IAAI,GAAG,EAAU,CAAC;AACxD,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,UAAA,IAAI;IACzC,OAAA,8BAAsB,CAAC,GAAG,CAAC,IAAI,CAAC;AAAhC,CAAgC,CACjC,CAAC;AAEF;;;GAGG;AACU,QAAA,2BAA2B,GAAG,GAAG,CAAC","sourcesContent":["/**\n * The base number of milliseconds to use in calculating a suitable cool-down\n * time when a retryable error is encountered.\n */\nexport const DEFAULT_RETRY_DELAY_BASE = 100;\n\n/**\n * The maximum amount of time (in milliseconds) that will be used as a delay\n * between retry attempts.\n */\nexport const MAXIMUM_RETRY_DELAY = 20 * 1000;\n\n/**\n * HTTP status codes that indicate the operation may be retried.\n */\nexport const RETRYABLE_STATUS_CODES = new Set<number>();\n[429, 500, 502, 503, 504, 509].forEach(code =>\n  RETRYABLE_STATUS_CODES.add(code)\n);\n\n/**\n * The retry delay base (in milliseconds) to use when a throttling error is\n * encountered.\n */\nexport const THROTTLING_RETRY_DELAY_BASE = 500;\n"]}},"error":null,"hash":"b307482dfc4bdd26b34352b8b1138c89","cacheData":{"env":{}}}