{"id":"../node_modules/@aws-sdk/middleware-retry/build/configurations.js","dependencies":[{"name":"/Users/a/Desktop/buildopsTest/package.json","includedInParent":true,"mtime":1588209350205},{"name":"/Users/a/Desktop/buildopsTest/node_modules/@aws-sdk/middleware-retry/package.json","includedInParent":true,"mtime":1588208103132},{"name":"tslib","loc":{"line":3,"column":22},"parent":"/Users/a/Desktop/buildopsTest/node_modules/@aws-sdk/middleware-retry/build/configurations.js","resolved":"/Users/a/Desktop/buildopsTest/node_modules/tslib/tslib.es6.js"},{"name":"./defaultStrategy","loc":{"line":4,"column":32},"parent":"/Users/a/Desktop/buildopsTest/node_modules/@aws-sdk/middleware-retry/build/configurations.js","resolved":"/Users/a/Desktop/buildopsTest/node_modules/@aws-sdk/middleware-retry/build/defaultStrategy.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar defaultStrategy_1 = require(\"./defaultStrategy\");\nfunction resolveRetryConfig(input) {\n    var maxRetries = input.maxRetries === undefined ? 3 : input.maxRetries;\n    return tslib_1.__assign(tslib_1.__assign({}, input), { maxRetries: maxRetries, retryStrategy: input.retryStrategy || new defaultStrategy_1.ExponentialBackOffStrategy(maxRetries) });\n}\nexports.resolveRetryConfig = resolveRetryConfig;\n"},"sourceMaps":{"js":{"version":3,"file":"configurations.js","sourceRoot":"","sources":["../src/configurations.ts"],"names":[],"mappings":";;;AACA,qDAA+D;AAgB/D,SAAgB,kBAAkB,CAChC,KAA2B;IAE3B,IAAM,UAAU,GAAG,KAAK,CAAC,UAAU,KAAK,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC;IACzE,6CACK,KAAK,KACR,UAAU,YAAA,EACV,aAAa,EACX,KAAK,CAAC,aAAa,IAAI,IAAI,4CAA0B,CAAC,UAAU,CAAC,IACnE;AACJ,CAAC;AAVD,gDAUC","sourcesContent":["import { RetryStrategy } from \"@aws-sdk/types\";\nimport { ExponentialBackOffStrategy } from \"./defaultStrategy\";\n\nexport interface RetryInputConfig {\n  /**\n   * The maximum number of times requests that encounter potentially transient failures should be retried\n   */\n  maxRetries?: number;\n  /**\n   * The strategy to retry the request. Using built-in exponential backoff strategy by default.\n   */\n  retryStrategy?: RetryStrategy;\n}\nexport interface RetryResolvedConfig {\n  maxRetries: number;\n  retryStrategy: RetryStrategy;\n}\nexport function resolveRetryConfig<T>(\n  input: T & RetryInputConfig\n): T & RetryResolvedConfig {\n  const maxRetries = input.maxRetries === undefined ? 3 : input.maxRetries;\n  return {\n    ...input,\n    maxRetries,\n    retryStrategy:\n      input.retryStrategy || new ExponentialBackOffStrategy(maxRetries)\n  };\n}\n"]}},"error":null,"hash":"8e5d211e1ecd8d768520de48d5335de0","cacheData":{"env":{}}}