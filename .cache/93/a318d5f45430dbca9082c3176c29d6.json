{"id":"../node_modules/@aws-sdk/smithy-client/build/lazy-json.js","dependencies":[{"name":"/Users/a/Desktop/buildopsTest/package.json","includedInParent":true,"mtime":1588209350205},{"name":"/Users/a/Desktop/buildopsTest/node_modules/@aws-sdk/smithy-client/package.json","includedInParent":true,"mtime":1588208103099},{"name":"tslib","loc":{"line":6,"column":22},"parent":"/Users/a/Desktop/buildopsTest/node_modules/@aws-sdk/smithy-client/build/lazy-json.js","resolved":"/Users/a/Desktop/buildopsTest/node_modules/tslib/tslib.es6.js"}],"generated":{"js":"\"use strict\";\n/**\n * Lazy String holder for JSON typed contents.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\n/**\n * Because of https://github.com/microsoft/tslib/issues/95,\n * TS 'extends' shim doesn't support extending native types like String.\n * So here we create StringWrapper that duplicate everything from String\n * class including its prototype chain. So we can extend from here.\n */\n// @ts-ignore StringWrapper implementation is not a simple constructor\nexports.StringWrapper = function () {\n    //@ts-ignore 'this' cannot be assigned to any, but Object.getPrototypeOf accepts any\n    var Class = Object.getPrototypeOf(this).constructor;\n    var Constructor = Function.bind.apply(String, tslib_1.__spread([null], arguments));\n    //@ts-ignore Call wrapped String constructor directly, don't bother typing it.\n    var instance = new Constructor();\n    Object.setPrototypeOf(instance, Class.prototype);\n    return instance;\n};\nexports.StringWrapper.prototype = Object.create(String.prototype, {\n    constructor: {\n        value: exports.StringWrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n    }\n});\nObject.setPrototypeOf(exports.StringWrapper, String);\nvar LazyJsonString = /** @class */ (function (_super) {\n    tslib_1.__extends(LazyJsonString, _super);\n    function LazyJsonString() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    LazyJsonString.prototype.deserializeJSON = function () {\n        return JSON.parse(_super.prototype.toString.call(this));\n    };\n    LazyJsonString.prototype.toJSON = function () {\n        return _super.prototype.toString.call(this);\n    };\n    LazyJsonString.fromObject = function (object) {\n        if (object instanceof LazyJsonString) {\n            return object;\n        }\n        else if (object instanceof String || typeof object === \"string\") {\n            return new LazyJsonString(object);\n        }\n        return new LazyJsonString(JSON.stringify(object));\n    };\n    return LazyJsonString;\n}(exports.StringWrapper));\nexports.LazyJsonString = LazyJsonString;\n"},"sourceMaps":{"js":{"version":3,"file":"lazy-json.js","sourceRoot":"","sources":["../src/lazy-json.ts"],"names":[],"mappings":";AAAA;;GAEG;;;AAMH;;;;;GAKG;AACH,sEAAsE;AACzD,QAAA,aAAa,GAAkB;IAC1C,oFAAoF;IACpF,IAAM,KAAK,GAAG,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;IACtD,IAAM,WAAW,GAAG,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,oBAAG,IAAW,GAAK,SAAS,EAAE,CAAC;IAC7E,8EAA8E;IAC9E,IAAM,QAAQ,GAAG,IAAI,WAAW,EAAE,CAAC;IACnC,MAAM,CAAC,cAAc,CAAC,QAAQ,EAAE,KAAK,CAAC,SAAS,CAAC,CAAC;IACjD,OAAO,QAAkB,CAAC;AAC5B,CAAC,CAAC;AACF,qBAAa,CAAC,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,SAAS,EAAE;IACxD,WAAW,EAAE;QACX,KAAK,EAAE,qBAAa;QACpB,UAAU,EAAE,KAAK;QACjB,QAAQ,EAAE,IAAI;QACd,YAAY,EAAE,IAAI;KACnB;CACF,CAAC,CAAC;AACH,MAAM,CAAC,cAAc,CAAC,qBAAa,EAAE,MAAM,CAAC,CAAC;AAE7C;IAAoC,0CAAa;IAAjD;;IAiBA,CAAC;IAhBC,wCAAe,GAAf;QACE,OAAO,IAAI,CAAC,KAAK,CAAC,iBAAM,QAAQ,WAAE,CAAC,CAAC;IACtC,CAAC;IAED,+BAAM,GAAN;QACE,OAAO,iBAAM,QAAQ,WAAE,CAAC;IAC1B,CAAC;IAEM,yBAAU,GAAjB,UAAkB,MAAW;QAC3B,IAAI,MAAM,YAAY,cAAc,EAAE;YACpC,OAAO,MAAM,CAAC;SACf;aAAM,IAAI,MAAM,YAAY,MAAM,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;YACjE,OAAO,IAAI,cAAc,CAAC,MAAM,CAAC,CAAC;SACnC;QACD,OAAO,IAAI,cAAc,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC;IACpD,CAAC;IACH,qBAAC;AAAD,CAAC,AAjBD,CAAoC,qBAAa,GAiBhD;AAjBY,wCAAc","sourcesContent":["/**\n * Lazy String holder for JSON typed contents.\n */\n\ninterface StringWrapper {\n  new (arg: any): String;\n}\n\n/**\n * Because of https://github.com/microsoft/tslib/issues/95,\n * TS 'extends' shim doesn't support extending native types like String.\n * So here we create StringWrapper that duplicate everything from String\n * class including its prototype chain. So we can extend from here.\n */\n// @ts-ignore StringWrapper implementation is not a simple constructor\nexport const StringWrapper: StringWrapper = function() {\n  //@ts-ignore 'this' cannot be assigned to any, but Object.getPrototypeOf accepts any\n  const Class = Object.getPrototypeOf(this).constructor;\n  const Constructor = Function.bind.apply(String, [null as any, ...arguments]);\n  //@ts-ignore Call wrapped String constructor directly, don't bother typing it.\n  const instance = new Constructor();\n  Object.setPrototypeOf(instance, Class.prototype);\n  return instance as String;\n};\nStringWrapper.prototype = Object.create(String.prototype, {\n  constructor: {\n    value: StringWrapper,\n    enumerable: false,\n    writable: true,\n    configurable: true\n  }\n});\nObject.setPrototypeOf(StringWrapper, String);\n\nexport class LazyJsonString extends StringWrapper {\n  deserializeJSON(): any {\n    return JSON.parse(super.toString());\n  }\n\n  toJSON(): string {\n    return super.toString();\n  }\n\n  static fromObject(object: any): LazyJsonString {\n    if (object instanceof LazyJsonString) {\n      return object;\n    } else if (object instanceof String || typeof object === \"string\") {\n      return new LazyJsonString(object);\n    }\n    return new LazyJsonString(JSON.stringify(object));\n  }\n}\n"]}},"error":null,"hash":"775b1bd7c8a45d7ad6024f67fc550209","cacheData":{"env":{}}}