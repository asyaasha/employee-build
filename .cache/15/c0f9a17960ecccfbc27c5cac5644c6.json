{"id":"../node_modules/@aws-sdk/middleware-sdk-s3/build/validate-bucket-name.js","dependencies":[{"name":"/Users/a/Desktop/buildopsTest/package.json","includedInParent":true,"mtime":1588363055010},{"name":"/Users/a/Desktop/buildopsTest/node_modules/@aws-sdk/middleware-sdk-s3/package.json","includedInParent":true,"mtime":1588306092115},{"name":"tslib","loc":{"line":3,"column":22},"parent":"/Users/a/Desktop/buildopsTest/node_modules/@aws-sdk/middleware-sdk-s3/build/validate-bucket-name.js","resolved":"/Users/a/Desktop/buildopsTest/node_modules/tslib/tslib.es6.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nfunction validateBucketNameMiddleware() {\n    var _this = this;\n    return function (next) { return function (args) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n        var input, err;\n        return tslib_1.__generator(this, function (_a) {\n            input = args.input;\n            if (typeof input.Bucket === \"string\" && input.Bucket.indexOf(\"/\") >= 0) {\n                err = new Error(\"Bucket name shouldn't contain '/', received '\" + input.Bucket + \"'\");\n                err.name = \"InvalidBucketName\";\n                throw err;\n            }\n            return [2 /*return*/, next(tslib_1.__assign({}, args))];\n        });\n    }); }; };\n}\nexports.validateBucketNameMiddleware = validateBucketNameMiddleware;\nexports.validateBucketNameMiddlewareOptions = {\n    step: \"initialize\",\n    tags: [\"VALIDATE_BUCKET_NAME\"],\n    name: \"validateBucketNameMiddleware\"\n};\nexports.getValidateBucketNamePlugin = function (unused) { return ({\n    applyToStack: function (clientStack) {\n        clientStack.add(validateBucketNameMiddleware(), exports.validateBucketNameMiddlewareOptions);\n    }\n}); };\n"},"sourceMaps":{"js":{"version":3,"file":"validate-bucket-name.js","sourceRoot":"","sources":["../src/validate-bucket-name.ts"],"names":[],"mappings":";;;AAUA,SAAgB,4BAA4B;IAA5C,iBAgBC;IAfC,OAAO,UACL,IAAoC,IACD,OAAA,UACnC,IAAqC;;;YAE7B,KAAK,GAAK,IAAI,MAAT,CAAU;YACvB,IAAI,OAAO,KAAK,CAAC,MAAM,KAAK,QAAQ,IAAI,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;gBAChE,GAAG,GAAG,IAAI,KAAK,CACnB,kDAAgD,KAAK,CAAC,MAAM,MAAG,CAChE,CAAC;gBACF,GAAG,CAAC,IAAI,GAAG,mBAAmB,CAAC;gBAC/B,MAAM,GAAG,CAAC;aACX;YACD,sBAAO,IAAI,sBAAM,IAAI,EAAG,EAAC;;SAC1B,EAZoC,CAYpC,CAAC;AACJ,CAAC;AAhBD,oEAgBC;AAEY,QAAA,mCAAmC,GAA6B;IAC3E,IAAI,EAAE,YAAY;IAClB,IAAI,EAAE,CAAC,sBAAsB,CAAC;IAC9B,IAAI,EAAE,8BAA8B;CACrC,CAAC;AAEW,QAAA,2BAA2B,GAAG,UACzC,MAAW,IACa,OAAA,CAAC;IACzB,YAAY,EAAE,UAAA,WAAW;QACvB,WAAW,CAAC,GAAG,CACb,4BAA4B,EAAE,EAC9B,2CAAmC,CACpC,CAAC;IACJ,CAAC;CACF,CAAC,EAPwB,CAOxB,CAAC","sourcesContent":["import {\n  InitializeHandler,\n  InitializeHandlerArguments,\n  InitializeHandlerOptions,\n  InitializeHandlerOutput,\n  InitializeMiddleware,\n  MetadataBearer,\n  Pluggable\n} from \"@aws-sdk/types\";\n\nexport function validateBucketNameMiddleware(): InitializeMiddleware<any, any> {\n  return <Output extends MetadataBearer>(\n    next: InitializeHandler<any, Output>\n  ): InitializeHandler<any, Output> => async (\n    args: InitializeHandlerArguments<any>\n  ): Promise<InitializeHandlerOutput<Output>> => {\n    const { input } = args;\n    if (typeof input.Bucket === \"string\" && input.Bucket.indexOf(\"/\") >= 0) {\n      const err = new Error(\n        `Bucket name shouldn't contain '/', received '${input.Bucket}'`\n      );\n      err.name = \"InvalidBucketName\";\n      throw err;\n    }\n    return next({ ...args });\n  };\n}\n\nexport const validateBucketNameMiddlewareOptions: InitializeHandlerOptions = {\n  step: \"initialize\",\n  tags: [\"VALIDATE_BUCKET_NAME\"],\n  name: \"validateBucketNameMiddleware\"\n};\n\nexport const getValidateBucketNamePlugin = (\n  unused: any\n): Pluggable<any, any> => ({\n  applyToStack: clientStack => {\n    clientStack.add(\n      validateBucketNameMiddleware(),\n      validateBucketNameMiddlewareOptions\n    );\n  }\n});\n"]}},"error":null,"hash":"803c0f341b4f6e223ef6d71edcecb96e","cacheData":{"env":{}}}