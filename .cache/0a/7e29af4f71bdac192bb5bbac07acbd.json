{"id":"../node_modules/@aws-sdk/protocol-http/build/httpResponse.js","dependencies":[{"name":"/Users/a/Desktop/buildopsTest/package.json","includedInParent":true,"mtime":1588305991096},{"name":"/Users/a/Desktop/buildopsTest/node_modules/@aws-sdk/protocol-http/package.json","includedInParent":true,"mtime":1588306092108}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar HttpResponse = /** @class */ (function () {\n    function HttpResponse(options) {\n        this.statusCode = options.statusCode;\n        this.headers = options.headers || {};\n        this.body = options.body;\n    }\n    HttpResponse.isInstance = function (response) {\n        //determine if response is a valid HttpResponse\n        if (!response)\n            return false;\n        var resp = response;\n        return (typeof resp.statusCode === \"number\" && typeof resp.headers === \"object\");\n    };\n    return HttpResponse;\n}());\nexports.HttpResponse = HttpResponse;\n"},"sourceMaps":{"js":{"version":3,"file":"httpResponse.js","sourceRoot":"","sources":["../src/httpResponse.ts"],"names":[],"mappings":";;AAYA;IAKE,sBAAY,OAA4B;QACtC,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC;QACrC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,IAAI,EAAE,CAAC;QACrC,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;IAC3B,CAAC;IAEM,uBAAU,GAAjB,UAAkB,QAAiB;QACjC,+CAA+C;QAC/C,IAAI,CAAC,QAAQ;YAAE,OAAO,KAAK,CAAC;QAC5B,IAAM,IAAI,GAAG,QAAe,CAAC;QAC7B,OAAO,CACL,OAAO,IAAI,CAAC,UAAU,KAAK,QAAQ,IAAI,OAAO,IAAI,CAAC,OAAO,KAAK,QAAQ,CACxE,CAAC;IACJ,CAAC;IACH,mBAAC;AAAD,CAAC,AAnBD,IAmBC;AAnBY,oCAAY","sourcesContent":["import {\n  HttpMessage,\n  HeaderBag,\n  HttpResponse as IHttpResponse\n} from \"@aws-sdk/types\";\n\ntype HttpResponseOptions = Partial<HttpMessage> & {\n  statusCode: number;\n};\n\nexport interface HttpResponse extends IHttpResponse {}\n\nexport class HttpResponse {\n  public statusCode: number;\n  public headers: HeaderBag;\n  public body?: any;\n\n  constructor(options: HttpResponseOptions) {\n    this.statusCode = options.statusCode;\n    this.headers = options.headers || {};\n    this.body = options.body;\n  }\n\n  static isInstance(response: unknown): response is HttpResponse {\n    //determine if response is a valid HttpResponse\n    if (!response) return false;\n    const resp = response as any;\n    return (\n      typeof resp.statusCode === \"number\" && typeof resp.headers === \"object\"\n    );\n  }\n}\n"]}},"error":null,"hash":"0e8d1db2a46cda481466cb863cf135b8","cacheData":{"env":{}}}