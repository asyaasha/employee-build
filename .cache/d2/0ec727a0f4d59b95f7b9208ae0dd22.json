{"id":"../node_modules/@aws-sdk/xml-builder/build/XmlNode.js","dependencies":[{"name":"/Users/a/Desktop/buildopsTest/package.json","includedInParent":true,"mtime":1588305991096},{"name":"/Users/a/Desktop/buildopsTest/node_modules/@aws-sdk/xml-builder/package.json","includedInParent":true,"mtime":1588306092042},{"name":"./escape-attribute","loc":{"line":3,"column":33},"parent":"/Users/a/Desktop/buildopsTest/node_modules/@aws-sdk/xml-builder/build/XmlNode.js","resolved":"/Users/a/Desktop/buildopsTest/node_modules/@aws-sdk/xml-builder/build/escape-attribute.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar escape_attribute_1 = require(\"./escape-attribute\");\n/**\n * Represents an XML node.\n */\nvar XmlNode = /** @class */ (function () {\n    function XmlNode(name, children) {\n        if (children === void 0) { children = []; }\n        this.name = name;\n        this.children = children;\n        this.attributes = {};\n    }\n    XmlNode.prototype.withName = function (name) {\n        this.name = name;\n        return this;\n    };\n    XmlNode.prototype.addAttribute = function (name, value) {\n        this.attributes[name] = value;\n        return this;\n    };\n    XmlNode.prototype.addChildNode = function (child) {\n        this.children.push(child);\n        return this;\n    };\n    XmlNode.prototype.removeAttribute = function (name) {\n        delete this.attributes[name];\n        return this;\n    };\n    XmlNode.prototype.toString = function () {\n        var hasChildren = Boolean(this.children.length);\n        var xmlText = \"<\" + this.name;\n        // add attributes\n        var attributes = this.attributes;\n        for (var _i = 0, _a = Object.keys(attributes); _i < _a.length; _i++) {\n            var attributeName = _a[_i];\n            var attribute = attributes[attributeName];\n            if (typeof attribute !== \"undefined\" && attribute !== null) {\n                xmlText += \" \" + attributeName + \"=\\\"\" + escape_attribute_1.escapeAttribute(\"\" + attribute) + \"\\\"\";\n            }\n        }\n        return (xmlText += !hasChildren\n            ? \"/>\"\n            : \">\" + this.children.map(function (c) { return c.toString(); }).join(\"\") + \"</\" + this.name + \">\");\n    };\n    return XmlNode;\n}());\nexports.XmlNode = XmlNode;\n"},"sourceMaps":{"js":{"version":3,"file":"XmlNode.js","sourceRoot":"","sources":["../src/XmlNode.ts"],"names":[],"mappings":";;AAAA,uDAAqD;AAGrD;;GAEG;AACH;IAGE,iBACU,IAAY,EACJ,QAA2B;QAA3B,yBAAA,EAAA,aAA2B;QADnC,SAAI,GAAJ,IAAI,CAAQ;QACJ,aAAQ,GAAR,QAAQ,CAAmB;QAJrC,eAAU,GAA4B,EAAE,CAAC;IAK9C,CAAC;IAEJ,0BAAQ,GAAR,UAAS,IAAY;QACnB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,OAAO,IAAI,CAAC;IACd,CAAC;IAED,8BAAY,GAAZ,UAAa,IAAY,EAAE,KAAU;QACnC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC;QAC9B,OAAO,IAAI,CAAC;IACd,CAAC;IAED,8BAAY,GAAZ,UAAa,KAAiB;QAC5B,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC1B,OAAO,IAAI,CAAC;IACd,CAAC;IAED,iCAAe,GAAf,UAAgB,IAAY;QAC1B,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QAC7B,OAAO,IAAI,CAAC;IACd,CAAC;IAED,0BAAQ,GAAR;QACE,IAAM,WAAW,GAAG,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QAClD,IAAI,OAAO,GAAG,MAAI,IAAI,CAAC,IAAM,CAAC;QAC9B,iBAAiB;QACjB,IAAM,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;QACnC,KAA0B,UAAuB,EAAvB,KAAA,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,EAAvB,cAAuB,EAAvB,IAAuB,EAAE;YAA9C,IAAI,aAAa,SAAA;YACpB,IAAI,SAAS,GAAG,UAAU,CAAC,aAAa,CAAC,CAAC;YAC1C,IAAI,OAAO,SAAS,KAAK,WAAW,IAAI,SAAS,KAAK,IAAI,EAAE;gBAC1D,OAAO,IAAI,MAAI,aAAa,WAAK,kCAAe,CAAC,EAAE,GAAG,SAAS,CAAC,OAAG,CAAC;aACrE;SACF;QAED,OAAO,CAAC,OAAO,IAAI,CAAC,WAAW;YAC7B,CAAC,CAAC,IAAI;YACN,CAAC,CAAC,MAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,QAAQ,EAAE,EAAZ,CAAY,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,UAAK,IAAI,CAAC,IAAI,MAAG,CAAC,CAAC;IAC1E,CAAC;IACH,cAAC;AAAD,CAAC,AA5CD,IA4CC;AA5CY,0BAAO","sourcesContent":["import { escapeAttribute } from \"./escape-attribute\";\nimport { Stringable } from \"./stringable\";\n\n/**\n * Represents an XML node.\n */\nexport class XmlNode {\n  private attributes: { [name: string]: any } = {};\n\n  constructor(\n    private name: string,\n    public readonly children: Stringable[] = []\n  ) {}\n\n  withName(name: string): XmlNode {\n    this.name = name;\n    return this;\n  }\n\n  addAttribute(name: string, value: any): XmlNode {\n    this.attributes[name] = value;\n    return this;\n  }\n\n  addChildNode(child: Stringable): XmlNode {\n    this.children.push(child);\n    return this;\n  }\n\n  removeAttribute(name: string): XmlNode {\n    delete this.attributes[name];\n    return this;\n  }\n\n  toString(): string {\n    const hasChildren = Boolean(this.children.length);\n    let xmlText = `<${this.name}`;\n    // add attributes\n    const attributes = this.attributes;\n    for (let attributeName of Object.keys(attributes)) {\n      let attribute = attributes[attributeName];\n      if (typeof attribute !== \"undefined\" && attribute !== null) {\n        xmlText += ` ${attributeName}=\"${escapeAttribute(\"\" + attribute)}\"`;\n      }\n    }\n\n    return (xmlText += !hasChildren\n      ? \"/>\"\n      : `>${this.children.map(c => c.toString()).join(\"\")}</${this.name}>`);\n  }\n}\n"]}},"error":null,"hash":"c7a385ec61c382612955f285ce49105a","cacheData":{"env":{}}}