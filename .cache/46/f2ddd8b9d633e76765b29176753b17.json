{"id":"../node_modules/@aws-sdk/util-utf8-browser/build/pureJs.js","dependencies":[{"name":"/Users/a/Desktop/buildopsTest/package.json","includedInParent":true,"mtime":1588363055010},{"name":"/Users/a/Desktop/buildopsTest/node_modules/@aws-sdk/util-utf8-browser/package.json","includedInParent":true,"mtime":1588306092044}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Converts a JS string from its native UCS-2/UTF-16 representation into a\n * Uint8Array of the bytes used to represent the equivalent characters in UTF-8.\n *\n * Cribbed from the `goog.crypt.stringToUtf8ByteArray` function in the Google\n * Closure library, though updated to use typed arrays.\n */\nfunction fromUtf8(input) {\n    var bytes = [];\n    for (var i = 0, len = input.length; i < len; i++) {\n        var value = input.charCodeAt(i);\n        if (value < 0x80) {\n            bytes.push(value);\n        }\n        else if (value < 0x800) {\n            bytes.push((value >> 6) | 192, (value & 63) | 128);\n        }\n        else if (i + 1 < input.length &&\n            (value & 0xfc00) === 0xd800 &&\n            (input.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {\n            var surrogatePair = 0x10000 +\n                ((value & 1023) << 10) +\n                (input.charCodeAt(++i) & 1023);\n            bytes.push((surrogatePair >> 18) | 240, ((surrogatePair >> 12) & 63) | 128, ((surrogatePair >> 6) & 63) | 128, (surrogatePair & 63) | 128);\n        }\n        else {\n            bytes.push((value >> 12) | 224, ((value >> 6) & 63) | 128, (value & 63) | 128);\n        }\n    }\n    return Uint8Array.from(bytes);\n}\nexports.fromUtf8 = fromUtf8;\n/**\n * Converts a typed array of bytes containing UTF-8 data into a native JS\n * string.\n *\n * Partly cribbed from the `goog.crypt.utf8ByteArrayToString` function in the\n * Google Closure library, though updated to use typed arrays and to better\n * handle astral plane code points.\n */\nfunction toUtf8(input) {\n    var decoded = \"\";\n    for (var i = 0, len = input.length; i < len; i++) {\n        var byte = input[i];\n        if (byte < 0x80) {\n            decoded += String.fromCharCode(byte);\n        }\n        else if (192 <= byte && byte < 224) {\n            var nextByte = input[++i];\n            decoded += String.fromCharCode(((byte & 31) << 6) | (nextByte & 63));\n        }\n        else if (240 <= byte && byte < 365) {\n            var surrogatePair = [byte, input[++i], input[++i], input[++i]];\n            var encoded = \"%\" + surrogatePair.map(function (byteValue) { return byteValue.toString(16); }).join(\"%\");\n            decoded += decodeURIComponent(encoded);\n        }\n        else {\n            decoded += String.fromCharCode(((byte & 15) << 12) |\n                ((input[++i] & 63) << 6) |\n                (input[++i] & 63));\n        }\n    }\n    return decoded;\n}\nexports.toUtf8 = toUtf8;\n"},"sourceMaps":{"js":{"version":3,"file":"pureJs.js","sourceRoot":"","sources":["../src/pureJs.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Converts a JS string from its native UCS-2/UTF-16 representation into a\n * Uint8Array of the bytes used to represent the equivalent characters in UTF-8.\n *\n * Cribbed from the `goog.crypt.stringToUtf8ByteArray` function in the Google\n * Closure library, though updated to use typed arrays.\n */\nexport function fromUtf8(input: string): Uint8Array {\n  const bytes: Array<number> = [];\n  for (let i = 0, len = input.length; i < len; i++) {\n    const value = input.charCodeAt(i);\n    if (value < 0x80) {\n      bytes.push(value);\n    } else if (value < 0x800) {\n      bytes.push((value >> 6) | 0b11000000, (value & 0b111111) | 0b10000000);\n    } else if (\n      i + 1 < input.length &&\n      (value & 0xfc00) === 0xd800 &&\n      (input.charCodeAt(i + 1) & 0xfc00) === 0xdc00\n    ) {\n      const surrogatePair =\n        0x10000 +\n        ((value & 0b1111111111) << 10) +\n        (input.charCodeAt(++i) & 0b1111111111);\n      bytes.push(\n        (surrogatePair >> 18) | 0b11110000,\n        ((surrogatePair >> 12) & 0b111111) | 0b10000000,\n        ((surrogatePair >> 6) & 0b111111) | 0b10000000,\n        (surrogatePair & 0b111111) | 0b10000000\n      );\n    } else {\n      bytes.push(\n        (value >> 12) | 0b11100000,\n        ((value >> 6) & 0b111111) | 0b10000000,\n        (value & 0b111111) | 0b10000000\n      );\n    }\n  }\n\n  return Uint8Array.from(bytes);\n}\n\n/**\n * Converts a typed array of bytes containing UTF-8 data into a native JS\n * string.\n *\n * Partly cribbed from the `goog.crypt.utf8ByteArrayToString` function in the\n * Google Closure library, though updated to use typed arrays and to better\n * handle astral plane code points.\n */\nexport function toUtf8(input: Uint8Array): string {\n  let decoded = \"\";\n  for (let i = 0, len = input.length; i < len; i++) {\n    const byte = input[i];\n    if (byte < 0x80) {\n      decoded += String.fromCharCode(byte);\n    } else if (0b11000000 <= byte && byte < 0b11100000) {\n      const nextByte = input[++i];\n      decoded += String.fromCharCode(\n        ((byte & 0b11111) << 6) | (nextByte & 0b111111)\n      );\n    } else if (0b11110000 <= byte && byte < 0b101101101) {\n      const surrogatePair = [byte, input[++i], input[++i], input[++i]];\n      const encoded =\n        \"%\" + surrogatePair.map(byteValue => byteValue.toString(16)).join(\"%\");\n      decoded += decodeURIComponent(encoded);\n    } else {\n      decoded += String.fromCharCode(\n        ((byte & 0b1111) << 12) |\n          ((input[++i] & 0b111111) << 6) |\n          (input[++i] & 0b111111)\n      );\n    }\n  }\n\n  return decoded;\n}\n"]}},"error":null,"hash":"252805cf0508f70c6064670711ee631e","cacheData":{"env":{}}}