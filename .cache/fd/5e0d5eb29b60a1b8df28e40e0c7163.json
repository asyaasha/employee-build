{"id":"../node_modules/@aws-sdk/middleware-bucket-endpoint/build/bucketHostname.js","dependencies":[{"name":"/Users/a/Desktop/buildopsTest/package.json","includedInParent":true,"mtime":1588209350205},{"name":"/Users/a/Desktop/buildopsTest/node_modules/@aws-sdk/middleware-bucket-endpoint/package.json","includedInParent":true,"mtime":1588208103125},{"name":"tslib","loc":{"line":3,"column":22},"parent":"/Users/a/Desktop/buildopsTest/node_modules/@aws-sdk/middleware-bucket-endpoint/build/bucketHostname.js","resolved":"/Users/a/Desktop/buildopsTest/node_modules/tslib/tslib.es6.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar DOMAIN_PATTERN = /^[a-z0-9][a-z0-9\\.\\-]{1,61}[a-z0-9]$/;\nvar IP_ADDRESS_PATTERN = /(\\d+\\.){3}\\d+/;\nvar DOTS_PATTERN = /\\.\\./;\nvar DOT_PATTERN = /\\./;\nvar S3_HOSTNAME_PATTERN = /^(.+\\.)?s3[.-]([a-z0-9-]+)\\./;\nvar S3_US_EAST_1_ALTNAME_PATTERN = /^s3(-external-1)?\\.amazonaws\\.com$/;\nvar AWS_PARTITION_SUFFIX = \"amazonaws.com\";\nfunction bucketHostname(_a) {\n    var _b = _a.accelerateEndpoint, accelerateEndpoint = _b === void 0 ? false : _b, baseHostname = _a.baseHostname, bucketName = _a.bucketName, _c = _a.dualstackEndpoint, dualstackEndpoint = _c === void 0 ? false : _c, _d = _a.pathStyleEndpoint, pathStyleEndpoint = _d === void 0 ? false : _d, _e = _a.tlsCompatible, tlsCompatible = _e === void 0 ? true : _e;\n    if (!S3_HOSTNAME_PATTERN.test(baseHostname)) {\n        return {\n            bucketEndpoint: false,\n            hostname: baseHostname\n        };\n    }\n    var _f = tslib_1.__read(S3_US_EAST_1_ALTNAME_PATTERN.test(baseHostname)\n        ? [\"us-east-1\", AWS_PARTITION_SUFFIX]\n        : partitionSuffix(baseHostname), 2), region = _f[0], hostnameSuffix = _f[1];\n    if (pathStyleEndpoint ||\n        !isDnsCompatibleBucketName(bucketName) ||\n        (tlsCompatible && DOT_PATTERN.test(bucketName))) {\n        return {\n            bucketEndpoint: false,\n            hostname: dualstackEndpoint\n                ? \"s3.dualstack.\" + region + \".\" + hostnameSuffix\n                : baseHostname\n        };\n    }\n    if (accelerateEndpoint) {\n        baseHostname = \"s3-accelerate\" + (dualstackEndpoint ? \".dualstack\" : \"\") + \".\" + hostnameSuffix;\n    }\n    else if (dualstackEndpoint) {\n        baseHostname = \"s3.dualstack.\" + region + \".\" + hostnameSuffix;\n    }\n    return {\n        bucketEndpoint: true,\n        hostname: bucketName + \".\" + baseHostname\n    };\n}\nexports.bucketHostname = bucketHostname;\n/**\n * Determines whether a given string is DNS compliant per the rules outlined by\n * S3. Length, capitaization, and leading dot restrictions are enforced by the\n * DOMAIN_PATTERN regular expression.\n *\n * @see https://docs.aws.amazon.com/AmazonS3/latest/dev/BucketRestrictions.html\n */\nfunction isDnsCompatibleBucketName(bucketName) {\n    return (DOMAIN_PATTERN.test(bucketName) &&\n        !IP_ADDRESS_PATTERN.test(bucketName) &&\n        !DOTS_PATTERN.test(bucketName));\n}\nfunction partitionSuffix(hostname) {\n    var parts = hostname.match(S3_HOSTNAME_PATTERN);\n    return [parts[2], hostname.replace(new RegExp(\"^\" + parts[0]), \"\")];\n}\n"},"sourceMaps":{"js":{"version":3,"file":"bucketHostname.js","sourceRoot":"","sources":["../src/bucketHostname.ts"],"names":[],"mappings":";;;AAAA,IAAM,cAAc,GAAG,sCAAsC,CAAC;AAC9D,IAAM,kBAAkB,GAAG,eAAe,CAAC;AAC3C,IAAM,YAAY,GAAG,MAAM,CAAC;AAC5B,IAAM,WAAW,GAAG,IAAI,CAAC;AACzB,IAAM,mBAAmB,GAAG,8BAA8B,CAAC;AAC3D,IAAM,4BAA4B,GAAG,oCAAoC,CAAC;AAC1E,IAAM,oBAAoB,GAAG,eAAe,CAAC;AAgB7C,SAAgB,cAAc,CAAC,EAOJ;QANzB,0BAA0B,EAA1B,+CAA0B,EAC1B,8BAAY,EACZ,0BAAU,EACV,yBAAyB,EAAzB,8CAAyB,EACzB,yBAAyB,EAAzB,8CAAyB,EACzB,qBAAoB,EAApB,yCAAoB;IAEpB,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE;QAC3C,OAAO;YACL,cAAc,EAAE,KAAK;YACrB,QAAQ,EAAE,YAAY;SACvB,CAAC;KACH;IAEK,IAAA;;2CAI2B,EAJ1B,cAAM,EAAE,sBAIkB,CAAC;IAElC,IACE,iBAAiB;QACjB,CAAC,yBAAyB,CAAC,UAAU,CAAC;QACtC,CAAC,aAAa,IAAI,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,EAC/C;QACA,OAAO;YACL,cAAc,EAAE,KAAK;YACrB,QAAQ,EAAE,iBAAiB;gBACzB,CAAC,CAAC,kBAAgB,MAAM,SAAI,cAAgB;gBAC5C,CAAC,CAAC,YAAY;SACjB,CAAC;KACH;IAED,IAAI,kBAAkB,EAAE;QACtB,YAAY,GAAG,mBACb,iBAAiB,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,UACnC,cAAgB,CAAC;KACtB;SAAM,IAAI,iBAAiB,EAAE;QAC5B,YAAY,GAAG,kBAAgB,MAAM,SAAI,cAAgB,CAAC;KAC3D;IAED,OAAO;QACL,cAAc,EAAE,IAAI;QACpB,QAAQ,EAAK,UAAU,SAAI,YAAc;KAC1C,CAAC;AACJ,CAAC;AA9CD,wCA8CC;AAED;;;;;;GAMG;AACH,SAAS,yBAAyB,CAAC,UAAkB;IACnD,OAAO,CACL,cAAc,CAAC,IAAI,CAAC,UAAU,CAAC;QAC/B,CAAC,kBAAkB,CAAC,IAAI,CAAC,UAAU,CAAC;QACpC,CAAC,YAAY,CAAC,IAAI,CAAC,UAAU,CAAC,CAC/B,CAAC;AACJ,CAAC;AAED,SAAS,eAAe,CAAC,QAAgB;IACvC,IAAM,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,mBAAmB,CAAqB,CAAC;IAEtE,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,OAAO,CAAC,IAAI,MAAM,CAAC,MAAI,KAAK,CAAC,CAAC,CAAG,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;AACtE,CAAC","sourcesContent":["const DOMAIN_PATTERN = /^[a-z0-9][a-z0-9\\.\\-]{1,61}[a-z0-9]$/;\nconst IP_ADDRESS_PATTERN = /(\\d+\\.){3}\\d+/;\nconst DOTS_PATTERN = /\\.\\./;\nconst DOT_PATTERN = /\\./;\nconst S3_HOSTNAME_PATTERN = /^(.+\\.)?s3[.-]([a-z0-9-]+)\\./;\nconst S3_US_EAST_1_ALTNAME_PATTERN = /^s3(-external-1)?\\.amazonaws\\.com$/;\nconst AWS_PARTITION_SUFFIX = \"amazonaws.com\";\n\nexport interface BucketHostnameParameters {\n  accelerateEndpoint?: boolean;\n  baseHostname: string;\n  bucketName: string;\n  dualstackEndpoint?: boolean;\n  pathStyleEndpoint?: boolean;\n  tlsCompatible?: boolean;\n}\n\nexport interface BucketHostname {\n  hostname: string;\n  bucketEndpoint: boolean;\n}\n\nexport function bucketHostname({\n  accelerateEndpoint = false,\n  baseHostname,\n  bucketName,\n  dualstackEndpoint = false,\n  pathStyleEndpoint = false,\n  tlsCompatible = true\n}: BucketHostnameParameters): BucketHostname {\n  if (!S3_HOSTNAME_PATTERN.test(baseHostname)) {\n    return {\n      bucketEndpoint: false,\n      hostname: baseHostname\n    };\n  }\n\n  const [region, hostnameSuffix] = S3_US_EAST_1_ALTNAME_PATTERN.test(\n    baseHostname\n  )\n    ? [\"us-east-1\", AWS_PARTITION_SUFFIX]\n    : partitionSuffix(baseHostname);\n\n  if (\n    pathStyleEndpoint ||\n    !isDnsCompatibleBucketName(bucketName) ||\n    (tlsCompatible && DOT_PATTERN.test(bucketName))\n  ) {\n    return {\n      bucketEndpoint: false,\n      hostname: dualstackEndpoint\n        ? `s3.dualstack.${region}.${hostnameSuffix}`\n        : baseHostname\n    };\n  }\n\n  if (accelerateEndpoint) {\n    baseHostname = `s3-accelerate${\n      dualstackEndpoint ? \".dualstack\" : \"\"\n    }.${hostnameSuffix}`;\n  } else if (dualstackEndpoint) {\n    baseHostname = `s3.dualstack.${region}.${hostnameSuffix}`;\n  }\n\n  return {\n    bucketEndpoint: true,\n    hostname: `${bucketName}.${baseHostname}`\n  };\n}\n\n/**\n * Determines whether a given string is DNS compliant per the rules outlined by\n * S3. Length, capitaization, and leading dot restrictions are enforced by the\n * DOMAIN_PATTERN regular expression.\n *\n * @see https://docs.aws.amazon.com/AmazonS3/latest/dev/BucketRestrictions.html\n */\nfunction isDnsCompatibleBucketName(bucketName: string): boolean {\n  return (\n    DOMAIN_PATTERN.test(bucketName) &&\n    !IP_ADDRESS_PATTERN.test(bucketName) &&\n    !DOTS_PATTERN.test(bucketName)\n  );\n}\n\nfunction partitionSuffix(hostname: string): [string, string] {\n  const parts = hostname.match(S3_HOSTNAME_PATTERN) as RegExpMatchArray;\n\n  return [parts[2], hostname.replace(new RegExp(`^${parts[0]}`), \"\")];\n}\n"]}},"error":null,"hash":"bfa6a494c5a96ffea105d616e806bc66","cacheData":{"env":{}}}