{"id":"../node_modules/@aws-sdk/middleware-location-constraint/build/index.js","dependencies":[{"name":"/Users/a/Desktop/buildopsTest/package.json","includedInParent":true,"mtime":1588218602939},{"name":"/Users/a/Desktop/buildopsTest/node_modules/@aws-sdk/middleware-location-constraint/package.json","includedInParent":true,"mtime":1588216998894},{"name":"tslib","loc":{"line":3,"column":22},"parent":"/Users/a/Desktop/buildopsTest/node_modules/@aws-sdk/middleware-location-constraint/build/index.js","resolved":"/Users/a/Desktop/buildopsTest/node_modules/tslib/tslib.es6.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\n/**\n * This middleware modifies the input on S3 CreateBucket requests.  If the LocationConstraint has not been set, this\n * middleware will set a LocationConstraint to match the configured region.  The CreateBucketConfiguration will be\n * removed entirely on requests to the us-east-1 region.\n */\nfunction locationConstraintMiddleware(options) {\n    var _this = this;\n    return function (next) { return function (args) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n        var CreateBucketConfiguration, region;\n        return tslib_1.__generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    CreateBucketConfiguration = args.input.CreateBucketConfiguration;\n                    return [4 /*yield*/, options.region()];\n                case 1:\n                    region = _a.sent();\n                    if (!CreateBucketConfiguration ||\n                        !CreateBucketConfiguration.LocationConstraint) {\n                        args = tslib_1.__assign(tslib_1.__assign({}, args), { input: tslib_1.__assign(tslib_1.__assign({}, args.input), { CreateBucketConfiguration: region === \"us-east-1\" ? undefined : { LocationConstraint: region } }) });\n                    }\n                    return [2 /*return*/, next(args)];\n            }\n        });\n    }); }; };\n}\nexports.locationConstraintMiddleware = locationConstraintMiddleware;\nexports.locationConstraintMiddlewareOptions = {\n    step: \"initialize\",\n    tags: [\"LOCATION_CONSTRAINT\", \"CREATE_BUCKET_CONFIGURATION\"],\n    name: \"locationConstraintMiddleware\"\n};\nexports.getLocationConstraintPlugin = function (config) { return ({\n    applyToStack: function (clientStack) {\n        clientStack.add(locationConstraintMiddleware(config), exports.locationConstraintMiddlewareOptions);\n    }\n}); };\n"},"sourceMaps":{"js":{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;;AAWA;;;;GAIG;AAEH,SAAgB,4BAA4B,CAC1C,OAAyC;IAD3C,iBA2BC;IAxBC,OAAO,UACL,IAAoC,IACD,OAAA,UACnC,IAAqC;;;;;oBAE7B,yBAAyB,GAAK,IAAI,CAAC,KAAK,0BAAf,CAAgB;oBAElC,qBAAM,OAAO,CAAC,MAAM,EAAE,EAAA;;oBAA/B,MAAM,GAAG,SAAsB;oBACrC,IACE,CAAC,yBAAyB;wBAC1B,CAAC,yBAAyB,CAAC,kBAAkB,EAC7C;wBACA,IAAI,yCACC,IAAI,KACP,KAAK,wCACA,IAAI,CAAC,KAAK,KACb,yBAAyB,EACvB,MAAM,KAAK,WAAW,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,kBAAkB,EAAE,MAAM,EAAE,MAExE,CAAC;qBACH;oBAED,sBAAO,IAAI,CAAC,IAAI,CAAC,EAAC;;;SACnB,EArBoC,CAqBpC,CAAC;AACJ,CAAC;AA3BD,oEA2BC;AAEY,QAAA,mCAAmC,GAA6B;IAC3E,IAAI,EAAE,YAAY;IAClB,IAAI,EAAE,CAAC,qBAAqB,EAAE,6BAA6B,CAAC;IAC5D,IAAI,EAAE,8BAA8B;CACrC,CAAC;AAEW,QAAA,2BAA2B,GAAG,UACzC,MAAwC,IAChB,OAAA,CAAC;IACzB,YAAY,EAAE,UAAA,WAAW;QACvB,WAAW,CAAC,GAAG,CACb,4BAA4B,CAAC,MAAM,CAAC,EACpC,2CAAmC,CACpC,CAAC;IACJ,CAAC;CACF,CAAC,EAPwB,CAOxB,CAAC","sourcesContent":["import {\n  InitializeHandler,\n  InitializeMiddleware,\n  InitializeHandlerArguments,\n  InitializeHandlerOptions,\n  InitializeHandlerOutput,\n  MetadataBearer,\n  Pluggable\n} from \"@aws-sdk/types\";\nimport { LocationConstraintResolvedConfig } from \"./configuration\";\n\n/**\n * This middleware modifies the input on S3 CreateBucket requests.  If the LocationConstraint has not been set, this\n * middleware will set a LocationConstraint to match the configured region.  The CreateBucketConfiguration will be\n * removed entirely on requests to the us-east-1 region.\n */\n\nexport function locationConstraintMiddleware(\n  options: LocationConstraintResolvedConfig\n): InitializeMiddleware<any, any> {\n  return <Output extends MetadataBearer>(\n    next: InitializeHandler<any, Output>\n  ): InitializeHandler<any, Output> => async (\n    args: InitializeHandlerArguments<any>\n  ): Promise<InitializeHandlerOutput<Output>> => {\n    const { CreateBucketConfiguration } = args.input;\n    //After region config resolution, region is a Provider<string>\n    const region = await options.region();\n    if (\n      !CreateBucketConfiguration ||\n      !CreateBucketConfiguration.LocationConstraint\n    ) {\n      args = {\n        ...args,\n        input: {\n          ...args.input,\n          CreateBucketConfiguration:\n            region === \"us-east-1\" ? undefined : { LocationConstraint: region }\n        }\n      };\n    }\n\n    return next(args);\n  };\n}\n\nexport const locationConstraintMiddlewareOptions: InitializeHandlerOptions = {\n  step: \"initialize\",\n  tags: [\"LOCATION_CONSTRAINT\", \"CREATE_BUCKET_CONFIGURATION\"],\n  name: \"locationConstraintMiddleware\"\n};\n\nexport const getLocationConstraintPlugin = (\n  config: LocationConstraintResolvedConfig\n): Pluggable<any, any> => ({\n  applyToStack: clientStack => {\n    clientStack.add(\n      locationConstraintMiddleware(config),\n      locationConstraintMiddlewareOptions\n    );\n  }\n});\n"]}},"error":null,"hash":"4ec3538343221e33677a9278041fbbc0","cacheData":{"env":{}}}