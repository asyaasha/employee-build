{"id":"../node_modules/@aws-sdk/middleware-user-agent/build/middleware.js","dependencies":[{"name":"/Users/a/Desktop/buildopsTest/package.json","includedInParent":true,"mtime":1588209350205},{"name":"/Users/a/Desktop/buildopsTest/node_modules/@aws-sdk/middleware-user-agent/package.json","includedInParent":true,"mtime":1588208103117},{"name":"tslib","loc":{"line":3,"column":22},"parent":"/Users/a/Desktop/buildopsTest/node_modules/@aws-sdk/middleware-user-agent/build/middleware.js","resolved":"/Users/a/Desktop/buildopsTest/node_modules/tslib/tslib.es6.js"},{"name":"@aws-sdk/protocol-http","loc":{"line":4,"column":30},"parent":"/Users/a/Desktop/buildopsTest/node_modules/@aws-sdk/middleware-user-agent/build/middleware.js","resolved":"/Users/a/Desktop/buildopsTest/node_modules/@aws-sdk/protocol-http/build/index.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar protocol_http_1 = require(\"@aws-sdk/protocol-http\");\nfunction userAgentMiddleware(options) {\n    return function (next) { return function (args) {\n        var request = args.request;\n        if (!protocol_http_1.HttpRequest.isInstance(request))\n            return next(args);\n        var headers = request.headers;\n        var userAgentHeader = options.runtime === \"node\" ? \"user-agent\" : \"x-amz-user-agent\";\n        if (!headers[userAgentHeader]) {\n            headers[userAgentHeader] = \"\" + options.defaultUserAgent;\n        }\n        else {\n            headers[userAgentHeader] += \" \" + options.defaultUserAgent;\n        }\n        if (options.customUserAgent) {\n            headers[userAgentHeader] += \" \" + options.customUserAgent;\n        }\n        return next(tslib_1.__assign(tslib_1.__assign({}, args), { request: request }));\n    }; };\n}\nexports.userAgentMiddleware = userAgentMiddleware;\nexports.getUserAgentMiddlewareOptions = {\n    name: \"getUserAgentMiddleware\",\n    step: \"build\",\n    tags: [\"SET_USER_AGENT\", \"USER_AGENT\"]\n};\nexports.getUserAgentPlugin = function (config) { return ({\n    applyToStack: function (clientStack) {\n        clientStack.add(userAgentMiddleware(config), exports.getUserAgentMiddlewareOptions);\n    }\n}); };\n"},"sourceMaps":{"js":{"version":3,"file":"middleware.js","sourceRoot":"","sources":["../src/middleware.ts"],"names":[],"mappings":";;;AAQA,wDAAqD;AAGrD,SAAgB,mBAAmB,CAAC,OAAgC;IAClE,OAAO,UACL,IAA4B,IACD,OAAA,UAC3B,IAAgC;QAE1B,IAAA,sBAAO,CAAU;QACvB,IAAI,CAAC,2BAAW,CAAC,UAAU,CAAC,OAAO,CAAC;YAAE,OAAO,IAAI,CAAC,IAAI,CAAC,CAAC;QAChD,IAAA,yBAAO,CAAa;QAC5B,IAAM,eAAe,GACnB,OAAO,CAAC,OAAO,KAAK,MAAM,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,kBAAkB,CAAC;QACjE,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,EAAE;YAC7B,OAAO,CAAC,eAAe,CAAC,GAAG,KAAG,OAAO,CAAC,gBAAkB,CAAC;SAC1D;aAAM;YACL,OAAO,CAAC,eAAe,CAAC,IAAI,MAAI,OAAO,CAAC,gBAAkB,CAAC;SAC5D;QACD,IAAI,OAAO,CAAC,eAAe,EAAE;YAC3B,OAAO,CAAC,eAAe,CAAC,IAAI,MAAI,OAAO,CAAC,eAAiB,CAAC;SAC3D;QACD,OAAO,IAAI,uCACN,IAAI,KACP,OAAO,SAAA,IACP,CAAC;IACL,CAAC,EApB4B,CAoB5B,CAAC;AACJ,CAAC;AAxBD,kDAwBC;AAEY,QAAA,6BAA6B,GAAwB;IAChE,IAAI,EAAE,wBAAwB;IAC9B,IAAI,EAAE,OAAO;IACb,IAAI,EAAE,CAAC,gBAAgB,EAAE,YAAY,CAAC;CACvC,CAAC;AAEW,QAAA,kBAAkB,GAAG,UAChC,MAA+B,IACP,OAAA,CAAC;IACzB,YAAY,EAAE,UAAA,WAAW;QACvB,WAAW,CAAC,GAAG,CAAC,mBAAmB,CAAC,MAAM,CAAC,EAAE,qCAA6B,CAAC,CAAC;IAC9E,CAAC;CACF,CAAC,EAJwB,CAIxB,CAAC","sourcesContent":["import {\n  BuildHandlerArguments,\n  BuildHandler,\n  MetadataBearer,\n  BuildHandlerOutput,\n  Pluggable,\n  BuildHandlerOptions\n} from \"@aws-sdk/types\";\nimport { HttpRequest } from \"@aws-sdk/protocol-http\";\nimport { UserAgentResolvedConfig } from \"./configurations\";\n\nexport function userAgentMiddleware(options: UserAgentResolvedConfig) {\n  return <Output extends MetadataBearer>(\n    next: BuildHandler<any, any>\n  ): BuildHandler<any, any> => (\n    args: BuildHandlerArguments<any>\n  ): Promise<BuildHandlerOutput<Output>> => {\n    let { request } = args;\n    if (!HttpRequest.isInstance(request)) return next(args);\n    const { headers } = request;\n    const userAgentHeader =\n      options.runtime === \"node\" ? \"user-agent\" : \"x-amz-user-agent\";\n    if (!headers[userAgentHeader]) {\n      headers[userAgentHeader] = `${options.defaultUserAgent}`;\n    } else {\n      headers[userAgentHeader] += ` ${options.defaultUserAgent}`;\n    }\n    if (options.customUserAgent) {\n      headers[userAgentHeader] += ` ${options.customUserAgent}`;\n    }\n    return next({\n      ...args,\n      request\n    });\n  };\n}\n\nexport const getUserAgentMiddlewareOptions: BuildHandlerOptions = {\n  name: \"getUserAgentMiddleware\",\n  step: \"build\",\n  tags: [\"SET_USER_AGENT\", \"USER_AGENT\"]\n};\n\nexport const getUserAgentPlugin = (\n  config: UserAgentResolvedConfig\n): Pluggable<any, any> => ({\n  applyToStack: clientStack => {\n    clientStack.add(userAgentMiddleware(config), getUserAgentMiddlewareOptions);\n  }\n});\n"]}},"error":null,"hash":"aa103bbb4cd7bb00020b060deaf173ed","cacheData":{"env":{}}}